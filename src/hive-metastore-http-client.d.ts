/** Declaration file generated by dts-gen */

export function CreateClient(host: any, port: any, authType: any, params: any, callback: any): any;

export namespace DefaultOptions {
    class protocol {
        constructor(trans: any);

        flush(): any;

        getTransport(): any;

        readBinary(): any;

        readBool(): any;

        readByte(): any;

        readDouble(): any;

        readFieldBegin(): any;

        readFieldEnd(): void;

        readI16(): any;

        readI32(f: any): any;

        readI64(): any;

        readListBegin(): any;

        readListEnd(): void;

        readMapBegin(): any;

        readMapEnd(): void;

        readMessageBegin(): any;

        readMessageEnd(): void;

        readSetBegin(): any;

        readSetEnd(): any;

        readString(): any;

        readStructBegin(): any;

        readStructEnd(): void;

        readValue(f: any): any;

        skip(type: any): void;

        writeBinary(arg: any): void;

        writeBool(bool: any): void;

        writeByte(byte: any): void;

        writeDouble(dub: any): void;

        writeFieldBegin(name: any, fieldType: any, fieldId: any): void;

        writeFieldEnd(): void;

        writeFieldStop(): void;

        writeI16(i16: any): void;

        writeI32(i32: any): void;

        writeI64(i64: any): void;

        writeListBegin(elemType: any, size: any): void;

        writeListEnd(): void;

        writeMapBegin(keyType: any, valType: any, size: any): void;

        writeMapEnd(): void;

        writeMessageBegin(name: any, messageType: any, seqid: any): void;

        writeMessageEnd(): void;

        writeSetBegin(elemType: any, size: any): void;

        writeSetEnd(): void;

        writeString(arg: any): void;

        writeStructBegin(name: any): void;

        writeStructEnd(): void;

        writeToTransportIfStackIsFlushable(): void;

        static RType: {
            dbl: number;
            i16: number;
            i32: number;
            i64: number;
            i8: number;
            lst: number;
            map: number;
            rec: number;
            set: number;
            str: number;
            tf: number;
        };

        static Type: {
            "10": string;
            "11": string;
            "12": string;
            "13": string;
            "14": string;
            "15": string;
            "2": string;
            "3": string;
            "4": string;
            "6": string;
            "8": string;
        };

        static Version: number;

    }

    class transport {
        constructor(buffer: any, callback: any);

        borrow(): any;

        close(): void;

        commitPosition(): void;

        consume(bytesConsumed: any): void;

        ensureAvailable(len: any): void;

        flush(): void;

        isOpen(): any;

        open(): void;

        read(len: any): any;

        readByte(): any;

        readDouble(): any;

        readI16(): any;

        readI32(): any;

        readString(len: any): any;

        reset(): void;

        rollbackPosition(): void;

        setCurrSeqId(seqid: any): void;

        write(buf: any): void;

        static receiver(callback: any, seqid: any): any;

    }

    const headers: {
        Connection: string;
    };

    const https: boolean;

    const path: string;

}

