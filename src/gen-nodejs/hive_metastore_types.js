//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var fb303_ttypes = require('./fb303_types');


var ttypes = module.exports = {};
ttypes.HiveObjectType = {
  'GLOBAL' : 1,
  'DATABASE' : 2,
  'TABLE' : 3,
  'PARTITION' : 4,
  'COLUMN' : 5
};
ttypes.PrincipalType = {
  'USER' : 1,
  'ROLE' : 2,
  'GROUP' : 3
};
ttypes.PartitionEventType = {
  'LOAD_DONE' : 1
};
ttypes.TxnState = {
  'COMMITTED' : 1,
  'ABORTED' : 2,
  'OPEN' : 3
};
ttypes.LockLevel = {
  'DB' : 1,
  'TABLE' : 2,
  'PARTITION' : 3
};
ttypes.LockState = {
  'ACQUIRED' : 1,
  'WAITING' : 2,
  'ABORT' : 3,
  'NOT_ACQUIRED' : 4
};
ttypes.LockType = {
  'SHARED_READ' : 1,
  'SHARED_WRITE' : 2,
  'EXCLUSIVE' : 3
};
ttypes.CompactionType = {
  'MINOR' : 1,
  'MAJOR' : 2
};
ttypes.GrantRevokeType = {
  'GRANT' : 1,
  'REVOKE' : 2
};
ttypes.DataOperationType = {
  'SELECT' : 1,
  'INSERT' : 2,
  'UPDATE' : 3,
  'DELETE' : 4,
  'UNSET' : 5,
  'NO_TXN' : 6
};
ttypes.EventRequestType = {
  'INSERT' : 1,
  'UPDATE' : 2,
  'DELETE' : 3
};
ttypes.FunctionType = {
  'JAVA' : 1
};
ttypes.ResourceType = {
  'JAR' : 1,
  'FILE' : 2,
  'ARCHIVE' : 3
};
ttypes.FileMetadataExprType = {
  'ORC_SARG' : 1
};
ttypes.ClientCapability = {
  'TEST_CAPABILITY' : 1
};
var Version = module.exports.Version = function(args) {
  this.version = null;
  this.comments = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = args.comments;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 2);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FieldSchema = module.exports.FieldSchema = function(args) {
  this.name = null;
  this.type = null;
  this.comment = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
FieldSchema.prototype = {};
FieldSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FieldSchema.prototype.write = function(output) {
  output.writeStructBegin('FieldSchema');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SQLPrimaryKey = module.exports.SQLPrimaryKey = function(args) {
  this.table_db = null;
  this.table_name = null;
  this.column_name = null;
  this.key_seq = null;
  this.pk_name = null;
  this.enable_cstr = null;
  this.validate_cstr = null;
  this.rely_cstr = null;
  if (args) {
    if (args.table_db !== undefined && args.table_db !== null) {
      this.table_db = args.table_db;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.column_name !== undefined && args.column_name !== null) {
      this.column_name = args.column_name;
    }
    if (args.key_seq !== undefined && args.key_seq !== null) {
      this.key_seq = args.key_seq;
    }
    if (args.pk_name !== undefined && args.pk_name !== null) {
      this.pk_name = args.pk_name;
    }
    if (args.enable_cstr !== undefined && args.enable_cstr !== null) {
      this.enable_cstr = args.enable_cstr;
    }
    if (args.validate_cstr !== undefined && args.validate_cstr !== null) {
      this.validate_cstr = args.validate_cstr;
    }
    if (args.rely_cstr !== undefined && args.rely_cstr !== null) {
      this.rely_cstr = args.rely_cstr;
    }
  }
};
SQLPrimaryKey.prototype = {};
SQLPrimaryKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table_db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.key_seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.pk_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enable_cstr = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.validate_cstr = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.rely_cstr = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SQLPrimaryKey.prototype.write = function(output) {
  output.writeStructBegin('SQLPrimaryKey');
  if (this.table_db !== null && this.table_db !== undefined) {
    output.writeFieldBegin('table_db', Thrift.Type.STRING, 1);
    output.writeString(this.table_db);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.column_name !== null && this.column_name !== undefined) {
    output.writeFieldBegin('column_name', Thrift.Type.STRING, 3);
    output.writeString(this.column_name);
    output.writeFieldEnd();
  }
  if (this.key_seq !== null && this.key_seq !== undefined) {
    output.writeFieldBegin('key_seq', Thrift.Type.I32, 4);
    output.writeI32(this.key_seq);
    output.writeFieldEnd();
  }
  if (this.pk_name !== null && this.pk_name !== undefined) {
    output.writeFieldBegin('pk_name', Thrift.Type.STRING, 5);
    output.writeString(this.pk_name);
    output.writeFieldEnd();
  }
  if (this.enable_cstr !== null && this.enable_cstr !== undefined) {
    output.writeFieldBegin('enable_cstr', Thrift.Type.BOOL, 6);
    output.writeBool(this.enable_cstr);
    output.writeFieldEnd();
  }
  if (this.validate_cstr !== null && this.validate_cstr !== undefined) {
    output.writeFieldBegin('validate_cstr', Thrift.Type.BOOL, 7);
    output.writeBool(this.validate_cstr);
    output.writeFieldEnd();
  }
  if (this.rely_cstr !== null && this.rely_cstr !== undefined) {
    output.writeFieldBegin('rely_cstr', Thrift.Type.BOOL, 8);
    output.writeBool(this.rely_cstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SQLForeignKey = module.exports.SQLForeignKey = function(args) {
  this.pktable_db = null;
  this.pktable_name = null;
  this.pkcolumn_name = null;
  this.fktable_db = null;
  this.fktable_name = null;
  this.fkcolumn_name = null;
  this.key_seq = null;
  this.update_rule = null;
  this.delete_rule = null;
  this.fk_name = null;
  this.pk_name = null;
  this.enable_cstr = null;
  this.validate_cstr = null;
  this.rely_cstr = null;
  if (args) {
    if (args.pktable_db !== undefined && args.pktable_db !== null) {
      this.pktable_db = args.pktable_db;
    }
    if (args.pktable_name !== undefined && args.pktable_name !== null) {
      this.pktable_name = args.pktable_name;
    }
    if (args.pkcolumn_name !== undefined && args.pkcolumn_name !== null) {
      this.pkcolumn_name = args.pkcolumn_name;
    }
    if (args.fktable_db !== undefined && args.fktable_db !== null) {
      this.fktable_db = args.fktable_db;
    }
    if (args.fktable_name !== undefined && args.fktable_name !== null) {
      this.fktable_name = args.fktable_name;
    }
    if (args.fkcolumn_name !== undefined && args.fkcolumn_name !== null) {
      this.fkcolumn_name = args.fkcolumn_name;
    }
    if (args.key_seq !== undefined && args.key_seq !== null) {
      this.key_seq = args.key_seq;
    }
    if (args.update_rule !== undefined && args.update_rule !== null) {
      this.update_rule = args.update_rule;
    }
    if (args.delete_rule !== undefined && args.delete_rule !== null) {
      this.delete_rule = args.delete_rule;
    }
    if (args.fk_name !== undefined && args.fk_name !== null) {
      this.fk_name = args.fk_name;
    }
    if (args.pk_name !== undefined && args.pk_name !== null) {
      this.pk_name = args.pk_name;
    }
    if (args.enable_cstr !== undefined && args.enable_cstr !== null) {
      this.enable_cstr = args.enable_cstr;
    }
    if (args.validate_cstr !== undefined && args.validate_cstr !== null) {
      this.validate_cstr = args.validate_cstr;
    }
    if (args.rely_cstr !== undefined && args.rely_cstr !== null) {
      this.rely_cstr = args.rely_cstr;
    }
  }
};
SQLForeignKey.prototype = {};
SQLForeignKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pktable_db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pktable_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pkcolumn_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fktable_db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fktable_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fkcolumn_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.key_seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.update_rule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.delete_rule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fk_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.pk_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.enable_cstr = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.validate_cstr = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.rely_cstr = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SQLForeignKey.prototype.write = function(output) {
  output.writeStructBegin('SQLForeignKey');
  if (this.pktable_db !== null && this.pktable_db !== undefined) {
    output.writeFieldBegin('pktable_db', Thrift.Type.STRING, 1);
    output.writeString(this.pktable_db);
    output.writeFieldEnd();
  }
  if (this.pktable_name !== null && this.pktable_name !== undefined) {
    output.writeFieldBegin('pktable_name', Thrift.Type.STRING, 2);
    output.writeString(this.pktable_name);
    output.writeFieldEnd();
  }
  if (this.pkcolumn_name !== null && this.pkcolumn_name !== undefined) {
    output.writeFieldBegin('pkcolumn_name', Thrift.Type.STRING, 3);
    output.writeString(this.pkcolumn_name);
    output.writeFieldEnd();
  }
  if (this.fktable_db !== null && this.fktable_db !== undefined) {
    output.writeFieldBegin('fktable_db', Thrift.Type.STRING, 4);
    output.writeString(this.fktable_db);
    output.writeFieldEnd();
  }
  if (this.fktable_name !== null && this.fktable_name !== undefined) {
    output.writeFieldBegin('fktable_name', Thrift.Type.STRING, 5);
    output.writeString(this.fktable_name);
    output.writeFieldEnd();
  }
  if (this.fkcolumn_name !== null && this.fkcolumn_name !== undefined) {
    output.writeFieldBegin('fkcolumn_name', Thrift.Type.STRING, 6);
    output.writeString(this.fkcolumn_name);
    output.writeFieldEnd();
  }
  if (this.key_seq !== null && this.key_seq !== undefined) {
    output.writeFieldBegin('key_seq', Thrift.Type.I32, 7);
    output.writeI32(this.key_seq);
    output.writeFieldEnd();
  }
  if (this.update_rule !== null && this.update_rule !== undefined) {
    output.writeFieldBegin('update_rule', Thrift.Type.I32, 8);
    output.writeI32(this.update_rule);
    output.writeFieldEnd();
  }
  if (this.delete_rule !== null && this.delete_rule !== undefined) {
    output.writeFieldBegin('delete_rule', Thrift.Type.I32, 9);
    output.writeI32(this.delete_rule);
    output.writeFieldEnd();
  }
  if (this.fk_name !== null && this.fk_name !== undefined) {
    output.writeFieldBegin('fk_name', Thrift.Type.STRING, 10);
    output.writeString(this.fk_name);
    output.writeFieldEnd();
  }
  if (this.pk_name !== null && this.pk_name !== undefined) {
    output.writeFieldBegin('pk_name', Thrift.Type.STRING, 11);
    output.writeString(this.pk_name);
    output.writeFieldEnd();
  }
  if (this.enable_cstr !== null && this.enable_cstr !== undefined) {
    output.writeFieldBegin('enable_cstr', Thrift.Type.BOOL, 12);
    output.writeBool(this.enable_cstr);
    output.writeFieldEnd();
  }
  if (this.validate_cstr !== null && this.validate_cstr !== undefined) {
    output.writeFieldBegin('validate_cstr', Thrift.Type.BOOL, 13);
    output.writeBool(this.validate_cstr);
    output.writeFieldEnd();
  }
  if (this.rely_cstr !== null && this.rely_cstr !== undefined) {
    output.writeFieldBegin('rely_cstr', Thrift.Type.BOOL, 14);
    output.writeBool(this.rely_cstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Type = module.exports.Type = function(args) {
  this.name = null;
  this.type1 = null;
  this.type2 = null;
  this.fields = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type1 !== undefined && args.type1 !== null) {
      this.type1 = args.type1;
    }
    if (args.type2 !== undefined && args.type2 !== null) {
      this.type2 = args.type2;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [ttypes.FieldSchema]);
    }
  }
};
Type.prototype = {};
Type.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.fields = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.FieldSchema();
          elem3.read(input);
          this.fields.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Type.prototype.write = function(output) {
  output.writeStructBegin('Type');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type1 !== null && this.type1 !== undefined) {
    output.writeFieldBegin('type1', Thrift.Type.STRING, 2);
    output.writeString(this.type1);
    output.writeFieldEnd();
  }
  if (this.type2 !== null && this.type2 !== undefined) {
    output.writeFieldBegin('type2', Thrift.Type.STRING, 3);
    output.writeString(this.type2);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter4 in this.fields) {
      if (this.fields.hasOwnProperty(iter4)) {
        iter4 = this.fields[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HiveObjectRef = module.exports.HiveObjectRef = function(args) {
  this.objectType = null;
  this.dbName = null;
  this.objectName = null;
  this.partValues = null;
  this.columnName = null;
  if (args) {
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.partValues !== undefined && args.partValues !== null) {
      this.partValues = Thrift.copyList(args.partValues, [null]);
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
  }
};
HiveObjectRef.prototype = {};
HiveObjectRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.partValues = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString();
          this.partValues.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectRef.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectRef');
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 1);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 3);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.partValues !== null && this.partValues !== undefined) {
    output.writeFieldBegin('partValues', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partValues.length);
    for (var iter9 in this.partValues) {
      if (this.partValues.hasOwnProperty(iter9)) {
        iter9 = this.partValues[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrivilegeGrantInfo = module.exports.PrivilegeGrantInfo = function(args) {
  this.privilege = null;
  this.createTime = null;
  this.grantor = null;
  this.grantorType = null;
  this.grantOption = null;
  if (args) {
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.grantor !== undefined && args.grantor !== null) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined && args.grantorType !== null) {
      this.grantorType = args.grantorType;
    }
    if (args.grantOption !== undefined && args.grantOption !== null) {
      this.grantOption = args.grantOption;
    }
  }
};
PrivilegeGrantInfo.prototype = {};
PrivilegeGrantInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.privilege = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeGrantInfo.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeGrantInfo');
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.STRING, 1);
    output.writeString(this.privilege);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 3);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 4);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 5);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HiveObjectPrivilege = module.exports.HiveObjectPrivilege = function(args) {
  this.hiveObject = null;
  this.principalName = null;
  this.principalType = null;
  this.grantInfo = null;
  if (args) {
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject);
    }
    if (args.principalName !== undefined && args.principalName !== null) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined && args.principalType !== null) {
      this.principalType = args.principalType;
    }
    if (args.grantInfo !== undefined && args.grantInfo !== null) {
      this.grantInfo = new ttypes.PrivilegeGrantInfo(args.grantInfo);
    }
  }
};
HiveObjectPrivilege.prototype = {};
HiveObjectPrivilege.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.grantInfo = new ttypes.PrivilegeGrantInfo();
        this.grantInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectPrivilege.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectPrivilege');
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantInfo !== null && this.grantInfo !== undefined) {
    output.writeFieldBegin('grantInfo', Thrift.Type.STRUCT, 4);
    this.grantInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrivilegeBag = module.exports.PrivilegeBag = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = Thrift.copyList(args.privileges, [ttypes.HiveObjectPrivilege]);
    }
  }
};
PrivilegeBag.prototype = {};
PrivilegeBag.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.privileges = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.HiveObjectPrivilege();
          elem13.read(input);
          this.privileges.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeBag.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeBag');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.privileges.length);
    for (var iter14 in this.privileges) {
      if (this.privileges.hasOwnProperty(iter14)) {
        iter14 = this.privileges[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrincipalPrivilegeSet = module.exports.PrincipalPrivilegeSet = function(args) {
  this.userPrivileges = null;
  this.groupPrivileges = null;
  this.rolePrivileges = null;
  if (args) {
    if (args.userPrivileges !== undefined && args.userPrivileges !== null) {
      this.userPrivileges = Thrift.copyMap(args.userPrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
    if (args.groupPrivileges !== undefined && args.groupPrivileges !== null) {
      this.groupPrivileges = Thrift.copyMap(args.groupPrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
    if (args.rolePrivileges !== undefined && args.rolePrivileges !== null) {
      this.rolePrivileges = Thrift.copyMap(args.rolePrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
  }
};
PrincipalPrivilegeSet.prototype = {};
PrincipalPrivilegeSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.userPrivileges = {};
        var _rtmp316 = input.readMapBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var key18 = null;
          var val19 = null;
          key18 = input.readString();
          val19 = [];
          var _rtmp321 = input.readListBegin();
          var _size20 = _rtmp321.size || 0;
          for (var _i22 = 0; _i22 < _size20; ++_i22) {
            var elem23 = null;
            elem23 = new ttypes.PrivilegeGrantInfo();
            elem23.read(input);
            val19.push(elem23);
          }
          input.readListEnd();
          this.userPrivileges[key18] = val19;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.groupPrivileges = {};
        var _rtmp325 = input.readMapBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var key27 = null;
          var val28 = null;
          key27 = input.readString();
          val28 = [];
          var _rtmp330 = input.readListBegin();
          var _size29 = _rtmp330.size || 0;
          for (var _i31 = 0; _i31 < _size29; ++_i31) {
            var elem32 = null;
            elem32 = new ttypes.PrivilegeGrantInfo();
            elem32.read(input);
            val28.push(elem32);
          }
          input.readListEnd();
          this.groupPrivileges[key27] = val28;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.rolePrivileges = {};
        var _rtmp334 = input.readMapBegin();
        var _size33 = _rtmp334.size || 0;
        for (var _i35 = 0; _i35 < _size33; ++_i35) {
          var key36 = null;
          var val37 = null;
          key36 = input.readString();
          val37 = [];
          var _rtmp339 = input.readListBegin();
          var _size38 = _rtmp339.size || 0;
          for (var _i40 = 0; _i40 < _size38; ++_i40) {
            var elem41 = null;
            elem41 = new ttypes.PrivilegeGrantInfo();
            elem41.read(input);
            val37.push(elem41);
          }
          input.readListEnd();
          this.rolePrivileges[key36] = val37;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrincipalPrivilegeSet.prototype.write = function(output) {
  output.writeStructBegin('PrincipalPrivilegeSet');
  if (this.userPrivileges !== null && this.userPrivileges !== undefined) {
    output.writeFieldBegin('userPrivileges', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.userPrivileges));
    for (var kiter42 in this.userPrivileges) {
      if (this.userPrivileges.hasOwnProperty(kiter42)) {
        var viter43 = this.userPrivileges[kiter42];
        output.writeString(kiter42);
        output.writeListBegin(Thrift.Type.STRUCT, viter43.length);
        for (var iter44 in viter43) {
          if (viter43.hasOwnProperty(iter44)) {
            iter44 = viter43[iter44];
            iter44.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.groupPrivileges !== null && this.groupPrivileges !== undefined) {
    output.writeFieldBegin('groupPrivileges', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.groupPrivileges));
    for (var kiter45 in this.groupPrivileges) {
      if (this.groupPrivileges.hasOwnProperty(kiter45)) {
        var viter46 = this.groupPrivileges[kiter45];
        output.writeString(kiter45);
        output.writeListBegin(Thrift.Type.STRUCT, viter46.length);
        for (var iter47 in viter46) {
          if (viter46.hasOwnProperty(iter47)) {
            iter47 = viter46[iter47];
            iter47.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rolePrivileges !== null && this.rolePrivileges !== undefined) {
    output.writeFieldBegin('rolePrivileges', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.rolePrivileges));
    for (var kiter48 in this.rolePrivileges) {
      if (this.rolePrivileges.hasOwnProperty(kiter48)) {
        var viter49 = this.rolePrivileges[kiter48];
        output.writeString(kiter48);
        output.writeListBegin(Thrift.Type.STRUCT, viter49.length);
        for (var iter50 in viter49) {
          if (viter49.hasOwnProperty(iter50)) {
            iter50 = viter49[iter50];
            iter50.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GrantRevokePrivilegeRequest = module.exports.GrantRevokePrivilegeRequest = function(args) {
  this.requestType = null;
  this.privileges = null;
  this.revokeGrantOption = null;
  if (args) {
    if (args.requestType !== undefined && args.requestType !== null) {
      this.requestType = args.requestType;
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrivilegeBag(args.privileges);
    }
    if (args.revokeGrantOption !== undefined && args.revokeGrantOption !== null) {
      this.revokeGrantOption = args.revokeGrantOption;
    }
  }
};
GrantRevokePrivilegeRequest.prototype = {};
GrantRevokePrivilegeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.requestType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.revokeGrantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokePrivilegeRequest.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokePrivilegeRequest');
  if (this.requestType !== null && this.requestType !== undefined) {
    output.writeFieldBegin('requestType', Thrift.Type.I32, 1);
    output.writeI32(this.requestType);
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 2);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  if (this.revokeGrantOption !== null && this.revokeGrantOption !== undefined) {
    output.writeFieldBegin('revokeGrantOption', Thrift.Type.BOOL, 3);
    output.writeBool(this.revokeGrantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GrantRevokePrivilegeResponse = module.exports.GrantRevokePrivilegeResponse = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
GrantRevokePrivilegeResponse.prototype = {};
GrantRevokePrivilegeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokePrivilegeResponse.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokePrivilegeResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Role = module.exports.Role = function(args) {
  this.roleName = null;
  this.createTime = null;
  this.ownerName = null;
  if (args) {
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.ownerName !== undefined && args.ownerName !== null) {
      this.ownerName = args.ownerName;
    }
  }
};
Role.prototype = {};
Role.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Role.prototype.write = function(output) {
  output.writeStructBegin('Role');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 3);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RolePrincipalGrant = module.exports.RolePrincipalGrant = function(args) {
  this.roleName = null;
  this.principalName = null;
  this.principalType = null;
  this.grantOption = null;
  this.grantTime = null;
  this.grantorName = null;
  this.grantorPrincipalType = null;
  if (args) {
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
    if (args.principalName !== undefined && args.principalName !== null) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined && args.principalType !== null) {
      this.principalType = args.principalType;
    }
    if (args.grantOption !== undefined && args.grantOption !== null) {
      this.grantOption = args.grantOption;
    }
    if (args.grantTime !== undefined && args.grantTime !== null) {
      this.grantTime = args.grantTime;
    }
    if (args.grantorName !== undefined && args.grantorName !== null) {
      this.grantorName = args.grantorName;
    }
    if (args.grantorPrincipalType !== undefined && args.grantorPrincipalType !== null) {
      this.grantorPrincipalType = args.grantorPrincipalType;
    }
  }
};
RolePrincipalGrant.prototype = {};
RolePrincipalGrant.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.grantTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.grantorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.grantorPrincipalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RolePrincipalGrant.prototype.write = function(output) {
  output.writeStructBegin('RolePrincipalGrant');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 4);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  if (this.grantTime !== null && this.grantTime !== undefined) {
    output.writeFieldBegin('grantTime', Thrift.Type.I32, 5);
    output.writeI32(this.grantTime);
    output.writeFieldEnd();
  }
  if (this.grantorName !== null && this.grantorName !== undefined) {
    output.writeFieldBegin('grantorName', Thrift.Type.STRING, 6);
    output.writeString(this.grantorName);
    output.writeFieldEnd();
  }
  if (this.grantorPrincipalType !== null && this.grantorPrincipalType !== undefined) {
    output.writeFieldBegin('grantorPrincipalType', Thrift.Type.I32, 7);
    output.writeI32(this.grantorPrincipalType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRoleGrantsForPrincipalRequest = module.exports.GetRoleGrantsForPrincipalRequest = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principal_name is unset!');
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principal_type is unset!');
    }
  }
};
GetRoleGrantsForPrincipalRequest.prototype = {};
GetRoleGrantsForPrincipalRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRoleGrantsForPrincipalRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRoleGrantsForPrincipalRequest');
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRoleGrantsForPrincipalResponse = module.exports.GetRoleGrantsForPrincipalResponse = function(args) {
  this.principalGrants = null;
  if (args) {
    if (args.principalGrants !== undefined && args.principalGrants !== null) {
      this.principalGrants = Thrift.copyList(args.principalGrants, [ttypes.RolePrincipalGrant]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principalGrants is unset!');
    }
  }
};
GetRoleGrantsForPrincipalResponse.prototype = {};
GetRoleGrantsForPrincipalResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.principalGrants = [];
        var _rtmp352 = input.readListBegin();
        var _size51 = _rtmp352.size || 0;
        for (var _i53 = 0; _i53 < _size51; ++_i53) {
          var elem54 = null;
          elem54 = new ttypes.RolePrincipalGrant();
          elem54.read(input);
          this.principalGrants.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRoleGrantsForPrincipalResponse.prototype.write = function(output) {
  output.writeStructBegin('GetRoleGrantsForPrincipalResponse');
  if (this.principalGrants !== null && this.principalGrants !== undefined) {
    output.writeFieldBegin('principalGrants', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.principalGrants.length);
    for (var iter55 in this.principalGrants) {
      if (this.principalGrants.hasOwnProperty(iter55)) {
        iter55 = this.principalGrants[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPrincipalsInRoleRequest = module.exports.GetPrincipalsInRoleRequest = function(args) {
  this.roleName = null;
  if (args) {
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field roleName is unset!');
    }
  }
};
GetPrincipalsInRoleRequest.prototype = {};
GetPrincipalsInRoleRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPrincipalsInRoleRequest.prototype.write = function(output) {
  output.writeStructBegin('GetPrincipalsInRoleRequest');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetPrincipalsInRoleResponse = module.exports.GetPrincipalsInRoleResponse = function(args) {
  this.principalGrants = null;
  if (args) {
    if (args.principalGrants !== undefined && args.principalGrants !== null) {
      this.principalGrants = Thrift.copyList(args.principalGrants, [ttypes.RolePrincipalGrant]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field principalGrants is unset!');
    }
  }
};
GetPrincipalsInRoleResponse.prototype = {};
GetPrincipalsInRoleResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.principalGrants = [];
        var _rtmp357 = input.readListBegin();
        var _size56 = _rtmp357.size || 0;
        for (var _i58 = 0; _i58 < _size56; ++_i58) {
          var elem59 = null;
          elem59 = new ttypes.RolePrincipalGrant();
          elem59.read(input);
          this.principalGrants.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetPrincipalsInRoleResponse.prototype.write = function(output) {
  output.writeStructBegin('GetPrincipalsInRoleResponse');
  if (this.principalGrants !== null && this.principalGrants !== undefined) {
    output.writeFieldBegin('principalGrants', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.principalGrants.length);
    for (var iter60 in this.principalGrants) {
      if (this.principalGrants.hasOwnProperty(iter60)) {
        iter60 = this.principalGrants[iter60];
        iter60.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GrantRevokeRoleRequest = module.exports.GrantRevokeRoleRequest = function(args) {
  this.requestType = null;
  this.roleName = null;
  this.principalName = null;
  this.principalType = null;
  this.grantor = null;
  this.grantorType = null;
  this.grantOption = null;
  if (args) {
    if (args.requestType !== undefined && args.requestType !== null) {
      this.requestType = args.requestType;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
    if (args.principalName !== undefined && args.principalName !== null) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined && args.principalType !== null) {
      this.principalType = args.principalType;
    }
    if (args.grantor !== undefined && args.grantor !== null) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined && args.grantorType !== null) {
      this.grantorType = args.grantorType;
    }
    if (args.grantOption !== undefined && args.grantOption !== null) {
      this.grantOption = args.grantOption;
    }
  }
};
GrantRevokeRoleRequest.prototype = {};
GrantRevokeRoleRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.requestType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokeRoleRequest.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokeRoleRequest');
  if (this.requestType !== null && this.requestType !== undefined) {
    output.writeFieldBegin('requestType', Thrift.Type.I32, 1);
    output.writeI32(this.requestType);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 3);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 4);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 5);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 6);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 7);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GrantRevokeRoleResponse = module.exports.GrantRevokeRoleResponse = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
GrantRevokeRoleResponse.prototype = {};
GrantRevokeRoleResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantRevokeRoleResponse.prototype.write = function(output) {
  output.writeStructBegin('GrantRevokeRoleResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Database = module.exports.Database = function(args) {
  this.name = null;
  this.description = null;
  this.locationUri = null;
  this.parameters = null;
  this.privileges = null;
  this.ownerName = null;
  this.ownerType = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.locationUri !== undefined && args.locationUri !== null) {
      this.locationUri = args.locationUri;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
    if (args.ownerName !== undefined && args.ownerName !== null) {
      this.ownerName = args.ownerName;
    }
    if (args.ownerType !== undefined && args.ownerType !== null) {
      this.ownerType = args.ownerType;
    }
  }
};
Database.prototype = {};
Database.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locationUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp362 = input.readMapBegin();
        var _size61 = _rtmp362.size || 0;
        for (var _i63 = 0; _i63 < _size61; ++_i63) {
          var key64 = null;
          var val65 = null;
          key64 = input.readString();
          val65 = input.readString();
          this.parameters[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.ownerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Database.prototype.write = function(output) {
  output.writeStructBegin('Database');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.locationUri !== null && this.locationUri !== undefined) {
    output.writeFieldBegin('locationUri', Thrift.Type.STRING, 3);
    output.writeString(this.locationUri);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter66 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter66)) {
        var viter67 = this.parameters[kiter66];
        output.writeString(kiter66);
        output.writeString(viter67);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 5);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 6);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  if (this.ownerType !== null && this.ownerType !== undefined) {
    output.writeFieldBegin('ownerType', Thrift.Type.I32, 7);
    output.writeI32(this.ownerType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SerDeInfo = module.exports.SerDeInfo = function(args) {
  this.name = null;
  this.serializationLib = null;
  this.parameters = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.serializationLib !== undefined && args.serializationLib !== null) {
      this.serializationLib = args.serializationLib;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
  }
};
SerDeInfo.prototype = {};
SerDeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serializationLib = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp369 = input.readMapBegin();
        var _size68 = _rtmp369.size || 0;
        for (var _i70 = 0; _i70 < _size68; ++_i70) {
          var key71 = null;
          var val72 = null;
          key71 = input.readString();
          val72 = input.readString();
          this.parameters[key71] = val72;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SerDeInfo.prototype.write = function(output) {
  output.writeStructBegin('SerDeInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serializationLib !== null && this.serializationLib !== undefined) {
    output.writeFieldBegin('serializationLib', Thrift.Type.STRING, 2);
    output.writeString(this.serializationLib);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter73 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter73)) {
        var viter74 = this.parameters[kiter73];
        output.writeString(kiter73);
        output.writeString(viter74);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Order = module.exports.Order = function(args) {
  this.col = null;
  this.order = null;
  if (args) {
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.col = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.STRING, 1);
    output.writeString(this.col);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SkewedInfo = module.exports.SkewedInfo = function(args) {
  this.skewedColNames = null;
  this.skewedColValues = null;
  this.skewedColValueLocationMaps = null;
  if (args) {
    if (args.skewedColNames !== undefined && args.skewedColNames !== null) {
      this.skewedColNames = Thrift.copyList(args.skewedColNames, [null]);
    }
    if (args.skewedColValues !== undefined && args.skewedColValues !== null) {
      this.skewedColValues = Thrift.copyList(args.skewedColValues, [Thrift.copyList, null]);
    }
    if (args.skewedColValueLocationMaps !== undefined && args.skewedColValueLocationMaps !== null) {
      this.skewedColValueLocationMaps = Thrift.copyMap(args.skewedColValueLocationMaps, [null]);
    }
  }
};
SkewedInfo.prototype = {};
SkewedInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.skewedColNames = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = input.readString();
          this.skewedColNames.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.skewedColValues = [];
        var _rtmp380 = input.readListBegin();
        var _size79 = _rtmp380.size || 0;
        for (var _i81 = 0; _i81 < _size79; ++_i81) {
          var elem82 = null;
          elem82 = [];
          var _rtmp384 = input.readListBegin();
          var _size83 = _rtmp384.size || 0;
          for (var _i85 = 0; _i85 < _size83; ++_i85) {
            var elem86 = null;
            elem86 = input.readString();
            elem82.push(elem86);
          }
          input.readListEnd();
          this.skewedColValues.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.skewedColValueLocationMaps = {};
        var _rtmp388 = input.readMapBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          var key90 = null;
          var val91 = null;
          key90 = [];
          var _rtmp393 = input.readListBegin();
          var _size92 = _rtmp393.size || 0;
          for (var _i94 = 0; _i94 < _size92; ++_i94) {
            var elem95 = null;
            elem95 = input.readString();
            key90.push(elem95);
          }
          input.readListEnd();
          val91 = input.readString();
          this.skewedColValueLocationMaps[key90] = val91;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SkewedInfo.prototype.write = function(output) {
  output.writeStructBegin('SkewedInfo');
  if (this.skewedColNames !== null && this.skewedColNames !== undefined) {
    output.writeFieldBegin('skewedColNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.skewedColNames.length);
    for (var iter96 in this.skewedColNames) {
      if (this.skewedColNames.hasOwnProperty(iter96)) {
        iter96 = this.skewedColNames[iter96];
        output.writeString(iter96);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewedColValues !== null && this.skewedColValues !== undefined) {
    output.writeFieldBegin('skewedColValues', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.skewedColValues.length);
    for (var iter97 in this.skewedColValues) {
      if (this.skewedColValues.hasOwnProperty(iter97)) {
        iter97 = this.skewedColValues[iter97];
        output.writeListBegin(Thrift.Type.STRING, iter97.length);
        for (var iter98 in iter97) {
          if (iter97.hasOwnProperty(iter98)) {
            iter98 = iter97[iter98];
            output.writeString(iter98);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewedColValueLocationMaps !== null && this.skewedColValueLocationMaps !== undefined) {
    output.writeFieldBegin('skewedColValueLocationMaps', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.LIST, Thrift.Type.STRING, Thrift.objectLength(this.skewedColValueLocationMaps));
    for (var kiter99 in this.skewedColValueLocationMaps) {
      if (this.skewedColValueLocationMaps.hasOwnProperty(kiter99)) {
        var viter100 = this.skewedColValueLocationMaps[kiter99];
        output.writeListBegin(Thrift.Type.STRING, kiter99.length);
        for (var iter101 in kiter99) {
          if (kiter99.hasOwnProperty(iter101)) {
            iter101 = kiter99[iter101];
            output.writeString(iter101);
          }
        }
        output.writeListEnd();
        output.writeString(viter100);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StorageDescriptor = module.exports.StorageDescriptor = function(args) {
  this.cols = null;
  this.location = null;
  this.inputFormat = null;
  this.outputFormat = null;
  this.compressed = null;
  this.numBuckets = null;
  this.serdeInfo = null;
  this.bucketCols = null;
  this.sortCols = null;
  this.parameters = null;
  this.skewedInfo = null;
  this.storedAsSubDirectories = null;
  if (args) {
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [ttypes.FieldSchema]);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.inputFormat !== undefined && args.inputFormat !== null) {
      this.inputFormat = args.inputFormat;
    }
    if (args.outputFormat !== undefined && args.outputFormat !== null) {
      this.outputFormat = args.outputFormat;
    }
    if (args.compressed !== undefined && args.compressed !== null) {
      this.compressed = args.compressed;
    }
    if (args.numBuckets !== undefined && args.numBuckets !== null) {
      this.numBuckets = args.numBuckets;
    }
    if (args.serdeInfo !== undefined && args.serdeInfo !== null) {
      this.serdeInfo = new ttypes.SerDeInfo(args.serdeInfo);
    }
    if (args.bucketCols !== undefined && args.bucketCols !== null) {
      this.bucketCols = Thrift.copyList(args.bucketCols, [null]);
    }
    if (args.sortCols !== undefined && args.sortCols !== null) {
      this.sortCols = Thrift.copyList(args.sortCols, [ttypes.Order]);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.skewedInfo !== undefined && args.skewedInfo !== null) {
      this.skewedInfo = new ttypes.SkewedInfo(args.skewedInfo);
    }
    if (args.storedAsSubDirectories !== undefined && args.storedAsSubDirectories !== null) {
      this.storedAsSubDirectories = args.storedAsSubDirectories;
    }
  }
};
StorageDescriptor.prototype = {};
StorageDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.cols = [];
        var _rtmp3103 = input.readListBegin();
        var _size102 = _rtmp3103.size || 0;
        for (var _i104 = 0; _i104 < _size102; ++_i104) {
          var elem105 = null;
          elem105 = new ttypes.FieldSchema();
          elem105.read(input);
          this.cols.push(elem105);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.numBuckets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.serdeInfo = new ttypes.SerDeInfo();
        this.serdeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.bucketCols = [];
        var _rtmp3107 = input.readListBegin();
        var _size106 = _rtmp3107.size || 0;
        for (var _i108 = 0; _i108 < _size106; ++_i108) {
          var elem109 = null;
          elem109 = input.readString();
          this.bucketCols.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.sortCols = [];
        var _rtmp3111 = input.readListBegin();
        var _size110 = _rtmp3111.size || 0;
        for (var _i112 = 0; _i112 < _size110; ++_i112) {
          var elem113 = null;
          elem113 = new ttypes.Order();
          elem113.read(input);
          this.sortCols.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp3115 = input.readMapBegin();
        var _size114 = _rtmp3115.size || 0;
        for (var _i116 = 0; _i116 < _size114; ++_i116) {
          var key117 = null;
          var val118 = null;
          key117 = input.readString();
          val118 = input.readString();
          this.parameters[key117] = val118;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.skewedInfo = new ttypes.SkewedInfo();
        this.skewedInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.storedAsSubDirectories = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StorageDescriptor.prototype.write = function(output) {
  output.writeStructBegin('StorageDescriptor');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter119 in this.cols) {
      if (this.cols.hasOwnProperty(iter119)) {
        iter119 = this.cols[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.inputFormat !== null && this.inputFormat !== undefined) {
    output.writeFieldBegin('inputFormat', Thrift.Type.STRING, 3);
    output.writeString(this.inputFormat);
    output.writeFieldEnd();
  }
  if (this.outputFormat !== null && this.outputFormat !== undefined) {
    output.writeFieldBegin('outputFormat', Thrift.Type.STRING, 4);
    output.writeString(this.outputFormat);
    output.writeFieldEnd();
  }
  if (this.compressed !== null && this.compressed !== undefined) {
    output.writeFieldBegin('compressed', Thrift.Type.BOOL, 5);
    output.writeBool(this.compressed);
    output.writeFieldEnd();
  }
  if (this.numBuckets !== null && this.numBuckets !== undefined) {
    output.writeFieldBegin('numBuckets', Thrift.Type.I32, 6);
    output.writeI32(this.numBuckets);
    output.writeFieldEnd();
  }
  if (this.serdeInfo !== null && this.serdeInfo !== undefined) {
    output.writeFieldBegin('serdeInfo', Thrift.Type.STRUCT, 7);
    this.serdeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.bucketCols !== null && this.bucketCols !== undefined) {
    output.writeFieldBegin('bucketCols', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.bucketCols.length);
    for (var iter120 in this.bucketCols) {
      if (this.bucketCols.hasOwnProperty(iter120)) {
        iter120 = this.bucketCols[iter120];
        output.writeString(iter120);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sortCols !== null && this.sortCols !== undefined) {
    output.writeFieldBegin('sortCols', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortCols.length);
    for (var iter121 in this.sortCols) {
      if (this.sortCols.hasOwnProperty(iter121)) {
        iter121 = this.sortCols[iter121];
        iter121.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter122 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter122)) {
        var viter123 = this.parameters[kiter122];
        output.writeString(kiter122);
        output.writeString(viter123);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.skewedInfo !== null && this.skewedInfo !== undefined) {
    output.writeFieldBegin('skewedInfo', Thrift.Type.STRUCT, 11);
    this.skewedInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.storedAsSubDirectories !== null && this.storedAsSubDirectories !== undefined) {
    output.writeFieldBegin('storedAsSubDirectories', Thrift.Type.BOOL, 12);
    output.writeBool(this.storedAsSubDirectories);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Table = module.exports.Table = function(args) {
  this.tableName = null;
  this.dbName = null;
  this.owner = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.retention = null;
  this.sd = null;
  this.partitionKeys = null;
  this.parameters = null;
  this.viewOriginalText = null;
  this.viewExpandedText = null;
  this.tableType = null;
  this.privileges = null;
  this.temporary = false;
  this.rewriteEnabled = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.retention !== undefined && args.retention !== null) {
      this.retention = args.retention;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.partitionKeys !== undefined && args.partitionKeys !== null) {
      this.partitionKeys = Thrift.copyList(args.partitionKeys, [ttypes.FieldSchema]);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.viewOriginalText !== undefined && args.viewOriginalText !== null) {
      this.viewOriginalText = args.viewOriginalText;
    }
    if (args.viewExpandedText !== undefined && args.viewExpandedText !== null) {
      this.viewExpandedText = args.viewExpandedText;
    }
    if (args.tableType !== undefined && args.tableType !== null) {
      this.tableType = args.tableType;
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
    if (args.temporary !== undefined && args.temporary !== null) {
      this.temporary = args.temporary;
    }
    if (args.rewriteEnabled !== undefined && args.rewriteEnabled !== null) {
      this.rewriteEnabled = args.rewriteEnabled;
    }
  }
};
Table.prototype = {};
Table.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.retention = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.partitionKeys = [];
        var _rtmp3125 = input.readListBegin();
        var _size124 = _rtmp3125.size || 0;
        for (var _i126 = 0; _i126 < _size124; ++_i126) {
          var elem127 = null;
          elem127 = new ttypes.FieldSchema();
          elem127.read(input);
          this.partitionKeys.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp3129 = input.readMapBegin();
        var _size128 = _rtmp3129.size || 0;
        for (var _i130 = 0; _i130 < _size128; ++_i130) {
          var key131 = null;
          var val132 = null;
          key131 = input.readString();
          val132 = input.readString();
          this.parameters[key131] = val132;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.viewOriginalText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viewExpandedText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.temporary = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.rewriteEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Table.prototype.write = function(output) {
  output.writeStructBegin('Table');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.retention !== null && this.retention !== undefined) {
    output.writeFieldBegin('retention', Thrift.Type.I32, 6);
    output.writeI32(this.retention);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 7);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.partitionKeys !== null && this.partitionKeys !== undefined) {
    output.writeFieldBegin('partitionKeys', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitionKeys.length);
    for (var iter133 in this.partitionKeys) {
      if (this.partitionKeys.hasOwnProperty(iter133)) {
        iter133 = this.partitionKeys[iter133];
        iter133.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter134 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter134)) {
        var viter135 = this.parameters[kiter134];
        output.writeString(kiter134);
        output.writeString(viter135);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.viewOriginalText !== null && this.viewOriginalText !== undefined) {
    output.writeFieldBegin('viewOriginalText', Thrift.Type.STRING, 10);
    output.writeString(this.viewOriginalText);
    output.writeFieldEnd();
  }
  if (this.viewExpandedText !== null && this.viewExpandedText !== undefined) {
    output.writeFieldBegin('viewExpandedText', Thrift.Type.STRING, 11);
    output.writeString(this.viewExpandedText);
    output.writeFieldEnd();
  }
  if (this.tableType !== null && this.tableType !== undefined) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 12);
    output.writeString(this.tableType);
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 13);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  if (this.temporary !== null && this.temporary !== undefined) {
    output.writeFieldBegin('temporary', Thrift.Type.BOOL, 14);
    output.writeBool(this.temporary);
    output.writeFieldEnd();
  }
  if (this.rewriteEnabled !== null && this.rewriteEnabled !== undefined) {
    output.writeFieldBegin('rewriteEnabled', Thrift.Type.BOOL, 15);
    output.writeBool(this.rewriteEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Partition = module.exports.Partition = function(args) {
  this.values = null;
  this.dbName = null;
  this.tableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.sd = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Partition.prototype = {};
Partition.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp3137 = input.readListBegin();
        var _size136 = _rtmp3137.size || 0;
        for (var _i138 = 0; _i138 < _size136; ++_i138) {
          var elem139 = null;
          elem139 = input.readString();
          this.values.push(elem139);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp3141 = input.readMapBegin();
        var _size140 = _rtmp3141.size || 0;
        for (var _i142 = 0; _i142 < _size140; ++_i142) {
          var key143 = null;
          var val144 = null;
          key143 = input.readString();
          val144 = input.readString();
          this.parameters[key143] = val144;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Partition.prototype.write = function(output) {
  output.writeStructBegin('Partition');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter145 in this.values) {
      if (this.values.hasOwnProperty(iter145)) {
        iter145 = this.values[iter145];
        output.writeString(iter145);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 6);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter146 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter146)) {
        var viter147 = this.parameters[kiter146];
        output.writeString(kiter146);
        output.writeString(viter147);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 8);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionWithoutSD = module.exports.PartitionWithoutSD = function(args) {
  this.values = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.relativePath = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.relativePath !== undefined && args.relativePath !== null) {
      this.relativePath = args.relativePath;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
PartitionWithoutSD.prototype = {};
PartitionWithoutSD.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp3149 = input.readListBegin();
        var _size148 = _rtmp3149.size || 0;
        for (var _i150 = 0; _i150 < _size148; ++_i150) {
          var elem151 = null;
          elem151 = input.readString();
          this.values.push(elem151);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.relativePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp3153 = input.readMapBegin();
        var _size152 = _rtmp3153.size || 0;
        for (var _i154 = 0; _i154 < _size152; ++_i154) {
          var key155 = null;
          var val156 = null;
          key155 = input.readString();
          val156 = input.readString();
          this.parameters[key155] = val156;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionWithoutSD.prototype.write = function(output) {
  output.writeStructBegin('PartitionWithoutSD');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter157 in this.values) {
      if (this.values.hasOwnProperty(iter157)) {
        iter157 = this.values[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 3);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.relativePath !== null && this.relativePath !== undefined) {
    output.writeFieldBegin('relativePath', Thrift.Type.STRING, 4);
    output.writeString(this.relativePath);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter158 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter158)) {
        var viter159 = this.parameters[kiter158];
        output.writeString(kiter158);
        output.writeString(viter159);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 6);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionSpecWithSharedSD = module.exports.PartitionSpecWithSharedSD = function(args) {
  this.partitions = null;
  this.sd = null;
  if (args) {
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [ttypes.PartitionWithoutSD]);
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
  }
};
PartitionSpecWithSharedSD.prototype = {};
PartitionSpecWithSharedSD.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.partitions = [];
        var _rtmp3161 = input.readListBegin();
        var _size160 = _rtmp3161.size || 0;
        for (var _i162 = 0; _i162 < _size160; ++_i162) {
          var elem163 = null;
          elem163 = new ttypes.PartitionWithoutSD();
          elem163.read(input);
          this.partitions.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionSpecWithSharedSD.prototype.write = function(output) {
  output.writeStructBegin('PartitionSpecWithSharedSD');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter164 in this.partitions) {
      if (this.partitions.hasOwnProperty(iter164)) {
        iter164 = this.partitions[iter164];
        iter164.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 2);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionListComposingSpec = module.exports.PartitionListComposingSpec = function(args) {
  this.partitions = null;
  if (args) {
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [ttypes.Partition]);
    }
  }
};
PartitionListComposingSpec.prototype = {};
PartitionListComposingSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.partitions = [];
        var _rtmp3166 = input.readListBegin();
        var _size165 = _rtmp3166.size || 0;
        for (var _i167 = 0; _i167 < _size165; ++_i167) {
          var elem168 = null;
          elem168 = new ttypes.Partition();
          elem168.read(input);
          this.partitions.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionListComposingSpec.prototype.write = function(output) {
  output.writeStructBegin('PartitionListComposingSpec');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter169 in this.partitions) {
      if (this.partitions.hasOwnProperty(iter169)) {
        iter169 = this.partitions[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionSpec = module.exports.PartitionSpec = function(args) {
  this.dbName = null;
  this.tableName = null;
  this.rootPath = null;
  this.sharedSDPartitionSpec = null;
  this.partitionList = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rootPath !== undefined && args.rootPath !== null) {
      this.rootPath = args.rootPath;
    }
    if (args.sharedSDPartitionSpec !== undefined && args.sharedSDPartitionSpec !== null) {
      this.sharedSDPartitionSpec = new ttypes.PartitionSpecWithSharedSD(args.sharedSDPartitionSpec);
    }
    if (args.partitionList !== undefined && args.partitionList !== null) {
      this.partitionList = new ttypes.PartitionListComposingSpec(args.partitionList);
    }
  }
};
PartitionSpec.prototype = {};
PartitionSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rootPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedSDPartitionSpec = new ttypes.PartitionSpecWithSharedSD();
        this.sharedSDPartitionSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.partitionList = new ttypes.PartitionListComposingSpec();
        this.partitionList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionSpec.prototype.write = function(output) {
  output.writeStructBegin('PartitionSpec');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rootPath !== null && this.rootPath !== undefined) {
    output.writeFieldBegin('rootPath', Thrift.Type.STRING, 3);
    output.writeString(this.rootPath);
    output.writeFieldEnd();
  }
  if (this.sharedSDPartitionSpec !== null && this.sharedSDPartitionSpec !== undefined) {
    output.writeFieldBegin('sharedSDPartitionSpec', Thrift.Type.STRUCT, 4);
    this.sharedSDPartitionSpec.write(output);
    output.writeFieldEnd();
  }
  if (this.partitionList !== null && this.partitionList !== undefined) {
    output.writeFieldBegin('partitionList', Thrift.Type.STRUCT, 5);
    this.partitionList.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Index = module.exports.Index = function(args) {
  this.indexName = null;
  this.indexHandlerClass = null;
  this.dbName = null;
  this.origTableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.indexTableName = null;
  this.sd = null;
  this.parameters = null;
  this.deferredRebuild = null;
  if (args) {
    if (args.indexName !== undefined && args.indexName !== null) {
      this.indexName = args.indexName;
    }
    if (args.indexHandlerClass !== undefined && args.indexHandlerClass !== null) {
      this.indexHandlerClass = args.indexHandlerClass;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.origTableName !== undefined && args.origTableName !== null) {
      this.origTableName = args.origTableName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.indexTableName !== undefined && args.indexTableName !== null) {
      this.indexTableName = args.indexTableName;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.deferredRebuild !== undefined && args.deferredRebuild !== null) {
      this.deferredRebuild = args.deferredRebuild;
    }
  }
};
Index.prototype = {};
Index.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexHandlerClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.origTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.indexTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.parameters = {};
        var _rtmp3171 = input.readMapBegin();
        var _size170 = _rtmp3171.size || 0;
        for (var _i172 = 0; _i172 < _size170; ++_i172) {
          var key173 = null;
          var val174 = null;
          key173 = input.readString();
          val174 = input.readString();
          this.parameters[key173] = val174;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.deferredRebuild = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Index.prototype.write = function(output) {
  output.writeStructBegin('Index');
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 1);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.indexHandlerClass !== null && this.indexHandlerClass !== undefined) {
    output.writeFieldBegin('indexHandlerClass', Thrift.Type.STRING, 2);
    output.writeString(this.indexHandlerClass);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 3);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.origTableName !== null && this.origTableName !== undefined) {
    output.writeFieldBegin('origTableName', Thrift.Type.STRING, 4);
    output.writeString(this.origTableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 5);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 6);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.indexTableName !== null && this.indexTableName !== undefined) {
    output.writeFieldBegin('indexTableName', Thrift.Type.STRING, 7);
    output.writeString(this.indexTableName);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 8);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter175 in this.parameters) {
      if (this.parameters.hasOwnProperty(kiter175)) {
        var viter176 = this.parameters[kiter175];
        output.writeString(kiter175);
        output.writeString(viter176);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deferredRebuild !== null && this.deferredRebuild !== undefined) {
    output.writeFieldBegin('deferredRebuild', Thrift.Type.BOOL, 10);
    output.writeBool(this.deferredRebuild);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BooleanColumnStatsData = module.exports.BooleanColumnStatsData = function(args) {
  this.numTrues = null;
  this.numFalses = null;
  this.numNulls = null;
  this.bitVectors = null;
  if (args) {
    if (args.numTrues !== undefined && args.numTrues !== null) {
      this.numTrues = args.numTrues;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numTrues is unset!');
    }
    if (args.numFalses !== undefined && args.numFalses !== null) {
      this.numFalses = args.numFalses;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numFalses is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
BooleanColumnStatsData.prototype = {};
BooleanColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTrues = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFalses = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('BooleanColumnStatsData');
  if (this.numTrues !== null && this.numTrues !== undefined) {
    output.writeFieldBegin('numTrues', Thrift.Type.I64, 1);
    output.writeI64(this.numTrues);
    output.writeFieldEnd();
  }
  if (this.numFalses !== null && this.numFalses !== undefined) {
    output.writeFieldBegin('numFalses', Thrift.Type.I64, 2);
    output.writeI64(this.numFalses);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 4);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DoubleColumnStatsData = module.exports.DoubleColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  this.bitVectors = null;
  if (args) {
    if (args.lowValue !== undefined && args.lowValue !== null) {
      this.lowValue = args.lowValue;
    }
    if (args.highValue !== undefined && args.highValue !== null) {
      this.highValue = args.highValue;
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
DoubleColumnStatsData.prototype = {};
DoubleColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.highValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DoubleColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('DoubleColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lowValue);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.highValue);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 5);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LongColumnStatsData = module.exports.LongColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  this.bitVectors = null;
  if (args) {
    if (args.lowValue !== undefined && args.lowValue !== null) {
      this.lowValue = args.lowValue;
    }
    if (args.highValue !== undefined && args.highValue !== null) {
      this.highValue = args.highValue;
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
LongColumnStatsData.prototype = {};
LongColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lowValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.highValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LongColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('LongColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.I64, 1);
    output.writeI64(this.lowValue);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.I64, 2);
    output.writeI64(this.highValue);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 5);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StringColumnStatsData = module.exports.StringColumnStatsData = function(args) {
  this.maxColLen = null;
  this.avgColLen = null;
  this.numNulls = null;
  this.numDVs = null;
  this.bitVectors = null;
  if (args) {
    if (args.maxColLen !== undefined && args.maxColLen !== null) {
      this.maxColLen = args.maxColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxColLen is unset!');
    }
    if (args.avgColLen !== undefined && args.avgColLen !== null) {
      this.avgColLen = args.avgColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avgColLen is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
StringColumnStatsData.prototype = {};
StringColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxColLen = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avgColLen = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('StringColumnStatsData');
  if (this.maxColLen !== null && this.maxColLen !== undefined) {
    output.writeFieldBegin('maxColLen', Thrift.Type.I64, 1);
    output.writeI64(this.maxColLen);
    output.writeFieldEnd();
  }
  if (this.avgColLen !== null && this.avgColLen !== undefined) {
    output.writeFieldBegin('avgColLen', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.avgColLen);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 5);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BinaryColumnStatsData = module.exports.BinaryColumnStatsData = function(args) {
  this.maxColLen = null;
  this.avgColLen = null;
  this.numNulls = null;
  this.bitVectors = null;
  if (args) {
    if (args.maxColLen !== undefined && args.maxColLen !== null) {
      this.maxColLen = args.maxColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxColLen is unset!');
    }
    if (args.avgColLen !== undefined && args.avgColLen !== null) {
      this.avgColLen = args.avgColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avgColLen is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
BinaryColumnStatsData.prototype = {};
BinaryColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxColLen = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avgColLen = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BinaryColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('BinaryColumnStatsData');
  if (this.maxColLen !== null && this.maxColLen !== undefined) {
    output.writeFieldBegin('maxColLen', Thrift.Type.I64, 1);
    output.writeI64(this.maxColLen);
    output.writeFieldEnd();
  }
  if (this.avgColLen !== null && this.avgColLen !== undefined) {
    output.writeFieldBegin('avgColLen', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.avgColLen);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 4);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Decimal = module.exports.Decimal = function(args) {
  this.unscaled = null;
  this.scale = null;
  if (args) {
    if (args.unscaled !== undefined && args.unscaled !== null) {
      this.unscaled = args.unscaled;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unscaled is unset!');
    }
    if (args.scale !== undefined && args.scale !== null) {
      this.scale = args.scale;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scale is unset!');
    }
  }
};
Decimal.prototype = {};
Decimal.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unscaled = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.scale = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Decimal.prototype.write = function(output) {
  output.writeStructBegin('Decimal');
  if (this.unscaled !== null && this.unscaled !== undefined) {
    output.writeFieldBegin('unscaled', Thrift.Type.STRING, 1);
    output.writeBinary(this.unscaled);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.I16, 3);
    output.writeI16(this.scale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecimalColumnStatsData = module.exports.DecimalColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  this.bitVectors = null;
  if (args) {
    if (args.lowValue !== undefined && args.lowValue !== null) {
      this.lowValue = new ttypes.Decimal(args.lowValue);
    }
    if (args.highValue !== undefined && args.highValue !== null) {
      this.highValue = new ttypes.Decimal(args.highValue);
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
DecimalColumnStatsData.prototype = {};
DecimalColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.lowValue = new ttypes.Decimal();
        this.lowValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.highValue = new ttypes.Decimal();
        this.highValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecimalColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('DecimalColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.STRUCT, 1);
    this.lowValue.write(output);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.STRUCT, 2);
    this.highValue.write(output);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 5);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Date = module.exports.Date = function(args) {
  this.daysSinceEpoch = null;
  if (args) {
    if (args.daysSinceEpoch !== undefined && args.daysSinceEpoch !== null) {
      this.daysSinceEpoch = args.daysSinceEpoch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field daysSinceEpoch is unset!');
    }
  }
};
Date.prototype = {};
Date.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.daysSinceEpoch = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Date.prototype.write = function(output) {
  output.writeStructBegin('Date');
  if (this.daysSinceEpoch !== null && this.daysSinceEpoch !== undefined) {
    output.writeFieldBegin('daysSinceEpoch', Thrift.Type.I64, 1);
    output.writeI64(this.daysSinceEpoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DateColumnStatsData = module.exports.DateColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  this.bitVectors = null;
  if (args) {
    if (args.lowValue !== undefined && args.lowValue !== null) {
      this.lowValue = new ttypes.Date(args.lowValue);
    }
    if (args.highValue !== undefined && args.highValue !== null) {
      this.highValue = new ttypes.Date(args.highValue);
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
    if (args.bitVectors !== undefined && args.bitVectors !== null) {
      this.bitVectors = args.bitVectors;
    }
  }
};
DateColumnStatsData.prototype = {};
DateColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.lowValue = new ttypes.Date();
        this.lowValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.highValue = new ttypes.Date();
        this.highValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bitVectors = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DateColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('DateColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.STRUCT, 1);
    this.lowValue.write(output);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.STRUCT, 2);
    this.highValue.write(output);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  if (this.bitVectors !== null && this.bitVectors !== undefined) {
    output.writeFieldBegin('bitVectors', Thrift.Type.STRING, 5);
    output.writeString(this.bitVectors);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatisticsData = module.exports.ColumnStatisticsData = function(args) {
  this.booleanStats = null;
  this.longStats = null;
  this.doubleStats = null;
  this.stringStats = null;
  this.binaryStats = null;
  this.decimalStats = null;
  this.dateStats = null;
  if (args) {
    if (args.booleanStats !== undefined && args.booleanStats !== null) {
      this.booleanStats = new ttypes.BooleanColumnStatsData(args.booleanStats);
    }
    if (args.longStats !== undefined && args.longStats !== null) {
      this.longStats = new ttypes.LongColumnStatsData(args.longStats);
    }
    if (args.doubleStats !== undefined && args.doubleStats !== null) {
      this.doubleStats = new ttypes.DoubleColumnStatsData(args.doubleStats);
    }
    if (args.stringStats !== undefined && args.stringStats !== null) {
      this.stringStats = new ttypes.StringColumnStatsData(args.stringStats);
    }
    if (args.binaryStats !== undefined && args.binaryStats !== null) {
      this.binaryStats = new ttypes.BinaryColumnStatsData(args.binaryStats);
    }
    if (args.decimalStats !== undefined && args.decimalStats !== null) {
      this.decimalStats = new ttypes.DecimalColumnStatsData(args.decimalStats);
    }
    if (args.dateStats !== undefined && args.dateStats !== null) {
      this.dateStats = new ttypes.DateColumnStatsData(args.dateStats);
    }
  }
};
ColumnStatisticsData.prototype = {};
ColumnStatisticsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.booleanStats = new ttypes.BooleanColumnStatsData();
        this.booleanStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.longStats = new ttypes.LongColumnStatsData();
        this.longStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleStats = new ttypes.DoubleColumnStatsData();
        this.doubleStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringStats = new ttypes.StringColumnStatsData();
        this.stringStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.binaryStats = new ttypes.BinaryColumnStatsData();
        this.binaryStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.decimalStats = new ttypes.DecimalColumnStatsData();
        this.decimalStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.dateStats = new ttypes.DateColumnStatsData();
        this.dateStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsData.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsData');
  if (this.booleanStats !== null && this.booleanStats !== undefined) {
    output.writeFieldBegin('booleanStats', Thrift.Type.STRUCT, 1);
    this.booleanStats.write(output);
    output.writeFieldEnd();
  }
  if (this.longStats !== null && this.longStats !== undefined) {
    output.writeFieldBegin('longStats', Thrift.Type.STRUCT, 2);
    this.longStats.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleStats !== null && this.doubleStats !== undefined) {
    output.writeFieldBegin('doubleStats', Thrift.Type.STRUCT, 3);
    this.doubleStats.write(output);
    output.writeFieldEnd();
  }
  if (this.stringStats !== null && this.stringStats !== undefined) {
    output.writeFieldBegin('stringStats', Thrift.Type.STRUCT, 4);
    this.stringStats.write(output);
    output.writeFieldEnd();
  }
  if (this.binaryStats !== null && this.binaryStats !== undefined) {
    output.writeFieldBegin('binaryStats', Thrift.Type.STRUCT, 5);
    this.binaryStats.write(output);
    output.writeFieldEnd();
  }
  if (this.decimalStats !== null && this.decimalStats !== undefined) {
    output.writeFieldBegin('decimalStats', Thrift.Type.STRUCT, 6);
    this.decimalStats.write(output);
    output.writeFieldEnd();
  }
  if (this.dateStats !== null && this.dateStats !== undefined) {
    output.writeFieldBegin('dateStats', Thrift.Type.STRUCT, 7);
    this.dateStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatisticsObj = module.exports.ColumnStatisticsObj = function(args) {
  this.colName = null;
  this.colType = null;
  this.statsData = null;
  if (args) {
    if (args.colName !== undefined && args.colName !== null) {
      this.colName = args.colName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colName is unset!');
    }
    if (args.colType !== undefined && args.colType !== null) {
      this.colType = args.colType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colType is unset!');
    }
    if (args.statsData !== undefined && args.statsData !== null) {
      this.statsData = new ttypes.ColumnStatisticsData(args.statsData);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsData is unset!');
    }
  }
};
ColumnStatisticsObj.prototype = {};
ColumnStatisticsObj.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.colName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsData = new ttypes.ColumnStatisticsData();
        this.statsData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsObj.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsObj');
  if (this.colName !== null && this.colName !== undefined) {
    output.writeFieldBegin('colName', Thrift.Type.STRING, 1);
    output.writeString(this.colName);
    output.writeFieldEnd();
  }
  if (this.colType !== null && this.colType !== undefined) {
    output.writeFieldBegin('colType', Thrift.Type.STRING, 2);
    output.writeString(this.colType);
    output.writeFieldEnd();
  }
  if (this.statsData !== null && this.statsData !== undefined) {
    output.writeFieldBegin('statsData', Thrift.Type.STRUCT, 3);
    this.statsData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatisticsDesc = module.exports.ColumnStatisticsDesc = function(args) {
  this.isTblLevel = null;
  this.dbName = null;
  this.tableName = null;
  this.partName = null;
  this.lastAnalyzed = null;
  if (args) {
    if (args.isTblLevel !== undefined && args.isTblLevel !== null) {
      this.isTblLevel = args.isTblLevel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isTblLevel is unset!');
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.partName !== undefined && args.partName !== null) {
      this.partName = args.partName;
    }
    if (args.lastAnalyzed !== undefined && args.lastAnalyzed !== null) {
      this.lastAnalyzed = args.lastAnalyzed;
    }
  }
};
ColumnStatisticsDesc.prototype = {};
ColumnStatisticsDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isTblLevel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.partName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastAnalyzed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsDesc.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsDesc');
  if (this.isTblLevel !== null && this.isTblLevel !== undefined) {
    output.writeFieldBegin('isTblLevel', Thrift.Type.BOOL, 1);
    output.writeBool(this.isTblLevel);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partName !== null && this.partName !== undefined) {
    output.writeFieldBegin('partName', Thrift.Type.STRING, 4);
    output.writeString(this.partName);
    output.writeFieldEnd();
  }
  if (this.lastAnalyzed !== null && this.lastAnalyzed !== undefined) {
    output.writeFieldBegin('lastAnalyzed', Thrift.Type.I64, 5);
    output.writeI64(this.lastAnalyzed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatistics = module.exports.ColumnStatistics = function(args) {
  this.statsDesc = null;
  this.statsObj = null;
  if (args) {
    if (args.statsDesc !== undefined && args.statsDesc !== null) {
      this.statsDesc = new ttypes.ColumnStatisticsDesc(args.statsDesc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsDesc is unset!');
    }
    if (args.statsObj !== undefined && args.statsObj !== null) {
      this.statsObj = Thrift.copyList(args.statsObj, [ttypes.ColumnStatisticsObj]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsObj is unset!');
    }
  }
};
ColumnStatistics.prototype = {};
ColumnStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsDesc = new ttypes.ColumnStatisticsDesc();
        this.statsDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.statsObj = [];
        var _rtmp3178 = input.readListBegin();
        var _size177 = _rtmp3178.size || 0;
        for (var _i179 = 0; _i179 < _size177; ++_i179) {
          var elem180 = null;
          elem180 = new ttypes.ColumnStatisticsObj();
          elem180.read(input);
          this.statsObj.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatistics.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatistics');
  if (this.statsDesc !== null && this.statsDesc !== undefined) {
    output.writeFieldBegin('statsDesc', Thrift.Type.STRUCT, 1);
    this.statsDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.statsObj !== null && this.statsObj !== undefined) {
    output.writeFieldBegin('statsObj', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statsObj.length);
    for (var iter181 in this.statsObj) {
      if (this.statsObj.hasOwnProperty(iter181)) {
        iter181 = this.statsObj[iter181];
        iter181.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AggrStats = module.exports.AggrStats = function(args) {
  this.colStats = null;
  this.partsFound = null;
  if (args) {
    if (args.colStats !== undefined && args.colStats !== null) {
      this.colStats = Thrift.copyList(args.colStats, [ttypes.ColumnStatisticsObj]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colStats is unset!');
    }
    if (args.partsFound !== undefined && args.partsFound !== null) {
      this.partsFound = args.partsFound;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partsFound is unset!');
    }
  }
};
AggrStats.prototype = {};
AggrStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.colStats = [];
        var _rtmp3183 = input.readListBegin();
        var _size182 = _rtmp3183.size || 0;
        for (var _i184 = 0; _i184 < _size182; ++_i184) {
          var elem185 = null;
          elem185 = new ttypes.ColumnStatisticsObj();
          elem185.read(input);
          this.colStats.push(elem185);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.partsFound = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStats.prototype.write = function(output) {
  output.writeStructBegin('AggrStats');
  if (this.colStats !== null && this.colStats !== undefined) {
    output.writeFieldBegin('colStats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.colStats.length);
    for (var iter186 in this.colStats) {
      if (this.colStats.hasOwnProperty(iter186)) {
        iter186 = this.colStats[iter186];
        iter186.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.partsFound !== null && this.partsFound !== undefined) {
    output.writeFieldBegin('partsFound', Thrift.Type.I64, 2);
    output.writeI64(this.partsFound);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetPartitionsStatsRequest = module.exports.SetPartitionsStatsRequest = function(args) {
  this.colStats = null;
  this.needMerge = null;
  if (args) {
    if (args.colStats !== undefined && args.colStats !== null) {
      this.colStats = Thrift.copyList(args.colStats, [ttypes.ColumnStatistics]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colStats is unset!');
    }
    if (args.needMerge !== undefined && args.needMerge !== null) {
      this.needMerge = args.needMerge;
    }
  }
};
SetPartitionsStatsRequest.prototype = {};
SetPartitionsStatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.colStats = [];
        var _rtmp3188 = input.readListBegin();
        var _size187 = _rtmp3188.size || 0;
        for (var _i189 = 0; _i189 < _size187; ++_i189) {
          var elem190 = null;
          elem190 = new ttypes.ColumnStatistics();
          elem190.read(input);
          this.colStats.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.needMerge = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetPartitionsStatsRequest.prototype.write = function(output) {
  output.writeStructBegin('SetPartitionsStatsRequest');
  if (this.colStats !== null && this.colStats !== undefined) {
    output.writeFieldBegin('colStats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.colStats.length);
    for (var iter191 in this.colStats) {
      if (this.colStats.hasOwnProperty(iter191)) {
        iter191 = this.colStats[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.needMerge !== null && this.needMerge !== undefined) {
    output.writeFieldBegin('needMerge', Thrift.Type.BOOL, 2);
    output.writeBool(this.needMerge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Schema = module.exports.Schema = function(args) {
  this.fieldSchemas = null;
  this.properties = null;
  if (args) {
    if (args.fieldSchemas !== undefined && args.fieldSchemas !== null) {
      this.fieldSchemas = Thrift.copyList(args.fieldSchemas, [ttypes.FieldSchema]);
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
Schema.prototype = {};
Schema.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.fieldSchemas = [];
        var _rtmp3193 = input.readListBegin();
        var _size192 = _rtmp3193.size || 0;
        for (var _i194 = 0; _i194 < _size192; ++_i194) {
          var elem195 = null;
          elem195 = new ttypes.FieldSchema();
          elem195.read(input);
          this.fieldSchemas.push(elem195);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.properties = {};
        var _rtmp3197 = input.readMapBegin();
        var _size196 = _rtmp3197.size || 0;
        for (var _i198 = 0; _i198 < _size196; ++_i198) {
          var key199 = null;
          var val200 = null;
          key199 = input.readString();
          val200 = input.readString();
          this.properties[key199] = val200;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schema.prototype.write = function(output) {
  output.writeStructBegin('Schema');
  if (this.fieldSchemas !== null && this.fieldSchemas !== undefined) {
    output.writeFieldBegin('fieldSchemas', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fieldSchemas.length);
    for (var iter201 in this.fieldSchemas) {
      if (this.fieldSchemas.hasOwnProperty(iter201)) {
        iter201 = this.fieldSchemas[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter202 in this.properties) {
      if (this.properties.hasOwnProperty(kiter202)) {
        var viter203 = this.properties[kiter202];
        output.writeString(kiter202);
        output.writeString(viter203);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EnvironmentContext = module.exports.EnvironmentContext = function(args) {
  this.properties = null;
  if (args) {
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
EnvironmentContext.prototype = {};
EnvironmentContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.properties = {};
        var _rtmp3205 = input.readMapBegin();
        var _size204 = _rtmp3205.size || 0;
        for (var _i206 = 0; _i206 < _size204; ++_i206) {
          var key207 = null;
          var val208 = null;
          key207 = input.readString();
          val208 = input.readString();
          this.properties[key207] = val208;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnvironmentContext.prototype.write = function(output) {
  output.writeStructBegin('EnvironmentContext');
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter209 in this.properties) {
      if (this.properties.hasOwnProperty(kiter209)) {
        var viter210 = this.properties[kiter209];
        output.writeString(kiter209);
        output.writeString(viter210);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrimaryKeysRequest = module.exports.PrimaryKeysRequest = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field db_name is unset!');
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tbl_name is unset!');
    }
  }
};
PrimaryKeysRequest.prototype = {};
PrimaryKeysRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrimaryKeysRequest.prototype.write = function(output) {
  output.writeStructBegin('PrimaryKeysRequest');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrimaryKeysResponse = module.exports.PrimaryKeysResponse = function(args) {
  this.primaryKeys = null;
  if (args) {
    if (args.primaryKeys !== undefined && args.primaryKeys !== null) {
      this.primaryKeys = Thrift.copyList(args.primaryKeys, [ttypes.SQLPrimaryKey]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field primaryKeys is unset!');
    }
  }
};
PrimaryKeysResponse.prototype = {};
PrimaryKeysResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.primaryKeys = [];
        var _rtmp3212 = input.readListBegin();
        var _size211 = _rtmp3212.size || 0;
        for (var _i213 = 0; _i213 < _size211; ++_i213) {
          var elem214 = null;
          elem214 = new ttypes.SQLPrimaryKey();
          elem214.read(input);
          this.primaryKeys.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrimaryKeysResponse.prototype.write = function(output) {
  output.writeStructBegin('PrimaryKeysResponse');
  if (this.primaryKeys !== null && this.primaryKeys !== undefined) {
    output.writeFieldBegin('primaryKeys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.primaryKeys.length);
    for (var iter215 in this.primaryKeys) {
      if (this.primaryKeys.hasOwnProperty(iter215)) {
        iter215 = this.primaryKeys[iter215];
        iter215.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ForeignKeysRequest = module.exports.ForeignKeysRequest = function(args) {
  this.parent_db_name = null;
  this.parent_tbl_name = null;
  this.foreign_db_name = null;
  this.foreign_tbl_name = null;
  if (args) {
    if (args.parent_db_name !== undefined && args.parent_db_name !== null) {
      this.parent_db_name = args.parent_db_name;
    }
    if (args.parent_tbl_name !== undefined && args.parent_tbl_name !== null) {
      this.parent_tbl_name = args.parent_tbl_name;
    }
    if (args.foreign_db_name !== undefined && args.foreign_db_name !== null) {
      this.foreign_db_name = args.foreign_db_name;
    }
    if (args.foreign_tbl_name !== undefined && args.foreign_tbl_name !== null) {
      this.foreign_tbl_name = args.foreign_tbl_name;
    }
  }
};
ForeignKeysRequest.prototype = {};
ForeignKeysRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.parent_db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parent_tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.foreign_db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.foreign_tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ForeignKeysRequest.prototype.write = function(output) {
  output.writeStructBegin('ForeignKeysRequest');
  if (this.parent_db_name !== null && this.parent_db_name !== undefined) {
    output.writeFieldBegin('parent_db_name', Thrift.Type.STRING, 1);
    output.writeString(this.parent_db_name);
    output.writeFieldEnd();
  }
  if (this.parent_tbl_name !== null && this.parent_tbl_name !== undefined) {
    output.writeFieldBegin('parent_tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.parent_tbl_name);
    output.writeFieldEnd();
  }
  if (this.foreign_db_name !== null && this.foreign_db_name !== undefined) {
    output.writeFieldBegin('foreign_db_name', Thrift.Type.STRING, 3);
    output.writeString(this.foreign_db_name);
    output.writeFieldEnd();
  }
  if (this.foreign_tbl_name !== null && this.foreign_tbl_name !== undefined) {
    output.writeFieldBegin('foreign_tbl_name', Thrift.Type.STRING, 4);
    output.writeString(this.foreign_tbl_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ForeignKeysResponse = module.exports.ForeignKeysResponse = function(args) {
  this.foreignKeys = null;
  if (args) {
    if (args.foreignKeys !== undefined && args.foreignKeys !== null) {
      this.foreignKeys = Thrift.copyList(args.foreignKeys, [ttypes.SQLForeignKey]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field foreignKeys is unset!');
    }
  }
};
ForeignKeysResponse.prototype = {};
ForeignKeysResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.foreignKeys = [];
        var _rtmp3217 = input.readListBegin();
        var _size216 = _rtmp3217.size || 0;
        for (var _i218 = 0; _i218 < _size216; ++_i218) {
          var elem219 = null;
          elem219 = new ttypes.SQLForeignKey();
          elem219.read(input);
          this.foreignKeys.push(elem219);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ForeignKeysResponse.prototype.write = function(output) {
  output.writeStructBegin('ForeignKeysResponse');
  if (this.foreignKeys !== null && this.foreignKeys !== undefined) {
    output.writeFieldBegin('foreignKeys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.foreignKeys.length);
    for (var iter220 in this.foreignKeys) {
      if (this.foreignKeys.hasOwnProperty(iter220)) {
        iter220 = this.foreignKeys[iter220];
        iter220.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DropConstraintRequest = module.exports.DropConstraintRequest = function(args) {
  this.dbname = null;
  this.tablename = null;
  this.constraintname = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tablename is unset!');
    }
    if (args.constraintname !== undefined && args.constraintname !== null) {
      this.constraintname = args.constraintname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field constraintname is unset!');
    }
  }
};
DropConstraintRequest.prototype = {};
DropConstraintRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.constraintname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropConstraintRequest.prototype.write = function(output) {
  output.writeStructBegin('DropConstraintRequest');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 2);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.constraintname !== null && this.constraintname !== undefined) {
    output.writeFieldBegin('constraintname', Thrift.Type.STRING, 3);
    output.writeString(this.constraintname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddPrimaryKeyRequest = module.exports.AddPrimaryKeyRequest = function(args) {
  this.primaryKeyCols = null;
  if (args) {
    if (args.primaryKeyCols !== undefined && args.primaryKeyCols !== null) {
      this.primaryKeyCols = Thrift.copyList(args.primaryKeyCols, [ttypes.SQLPrimaryKey]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field primaryKeyCols is unset!');
    }
  }
};
AddPrimaryKeyRequest.prototype = {};
AddPrimaryKeyRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.primaryKeyCols = [];
        var _rtmp3222 = input.readListBegin();
        var _size221 = _rtmp3222.size || 0;
        for (var _i223 = 0; _i223 < _size221; ++_i223) {
          var elem224 = null;
          elem224 = new ttypes.SQLPrimaryKey();
          elem224.read(input);
          this.primaryKeyCols.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPrimaryKeyRequest.prototype.write = function(output) {
  output.writeStructBegin('AddPrimaryKeyRequest');
  if (this.primaryKeyCols !== null && this.primaryKeyCols !== undefined) {
    output.writeFieldBegin('primaryKeyCols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.primaryKeyCols.length);
    for (var iter225 in this.primaryKeyCols) {
      if (this.primaryKeyCols.hasOwnProperty(iter225)) {
        iter225 = this.primaryKeyCols[iter225];
        iter225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddForeignKeyRequest = module.exports.AddForeignKeyRequest = function(args) {
  this.foreignKeyCols = null;
  if (args) {
    if (args.foreignKeyCols !== undefined && args.foreignKeyCols !== null) {
      this.foreignKeyCols = Thrift.copyList(args.foreignKeyCols, [ttypes.SQLForeignKey]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field foreignKeyCols is unset!');
    }
  }
};
AddForeignKeyRequest.prototype = {};
AddForeignKeyRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.foreignKeyCols = [];
        var _rtmp3227 = input.readListBegin();
        var _size226 = _rtmp3227.size || 0;
        for (var _i228 = 0; _i228 < _size226; ++_i228) {
          var elem229 = null;
          elem229 = new ttypes.SQLForeignKey();
          elem229.read(input);
          this.foreignKeyCols.push(elem229);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddForeignKeyRequest.prototype.write = function(output) {
  output.writeStructBegin('AddForeignKeyRequest');
  if (this.foreignKeyCols !== null && this.foreignKeyCols !== undefined) {
    output.writeFieldBegin('foreignKeyCols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.foreignKeyCols.length);
    for (var iter230 in this.foreignKeyCols) {
      if (this.foreignKeyCols.hasOwnProperty(iter230)) {
        iter230 = this.foreignKeyCols[iter230];
        iter230.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionsByExprResult = module.exports.PartitionsByExprResult = function(args) {
  this.partitions = null;
  this.hasUnknownPartitions = null;
  if (args) {
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [ttypes.Partition]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partitions is unset!');
    }
    if (args.hasUnknownPartitions !== undefined && args.hasUnknownPartitions !== null) {
      this.hasUnknownPartitions = args.hasUnknownPartitions;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasUnknownPartitions is unset!');
    }
  }
};
PartitionsByExprResult.prototype = {};
PartitionsByExprResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.partitions = [];
        var _rtmp3232 = input.readListBegin();
        var _size231 = _rtmp3232.size || 0;
        for (var _i233 = 0; _i233 < _size231; ++_i233) {
          var elem234 = null;
          elem234 = new ttypes.Partition();
          elem234.read(input);
          this.partitions.push(elem234);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasUnknownPartitions = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsByExprResult.prototype.write = function(output) {
  output.writeStructBegin('PartitionsByExprResult');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter235 in this.partitions) {
      if (this.partitions.hasOwnProperty(iter235)) {
        iter235 = this.partitions[iter235];
        iter235.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasUnknownPartitions !== null && this.hasUnknownPartitions !== undefined) {
    output.writeFieldBegin('hasUnknownPartitions', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasUnknownPartitions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionsByExprRequest = module.exports.PartitionsByExprRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.expr = null;
  this.defaultPartitionName = null;
  this.maxParts = -1;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expr is unset!');
    }
    if (args.defaultPartitionName !== undefined && args.defaultPartitionName !== null) {
      this.defaultPartitionName = args.defaultPartitionName;
    }
    if (args.maxParts !== undefined && args.maxParts !== null) {
      this.maxParts = args.maxParts;
    }
  }
};
PartitionsByExprRequest.prototype = {};
PartitionsByExprRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.defaultPartitionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.maxParts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsByExprRequest.prototype.write = function(output) {
  output.writeStructBegin('PartitionsByExprRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 3);
    output.writeBinary(this.expr);
    output.writeFieldEnd();
  }
  if (this.defaultPartitionName !== null && this.defaultPartitionName !== undefined) {
    output.writeFieldBegin('defaultPartitionName', Thrift.Type.STRING, 4);
    output.writeString(this.defaultPartitionName);
    output.writeFieldEnd();
  }
  if (this.maxParts !== null && this.maxParts !== undefined) {
    output.writeFieldBegin('maxParts', Thrift.Type.I16, 5);
    output.writeI16(this.maxParts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableStatsResult = module.exports.TableStatsResult = function(args) {
  this.tableStats = null;
  if (args) {
    if (args.tableStats !== undefined && args.tableStats !== null) {
      this.tableStats = Thrift.copyList(args.tableStats, [ttypes.ColumnStatisticsObj]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableStats is unset!');
    }
  }
};
TableStatsResult.prototype = {};
TableStatsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tableStats = [];
        var _rtmp3237 = input.readListBegin();
        var _size236 = _rtmp3237.size || 0;
        for (var _i238 = 0; _i238 < _size236; ++_i238) {
          var elem239 = null;
          elem239 = new ttypes.ColumnStatisticsObj();
          elem239.read(input);
          this.tableStats.push(elem239);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatsResult.prototype.write = function(output) {
  output.writeStructBegin('TableStatsResult');
  if (this.tableStats !== null && this.tableStats !== undefined) {
    output.writeFieldBegin('tableStats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableStats.length);
    for (var iter240 in this.tableStats) {
      if (this.tableStats.hasOwnProperty(iter240)) {
        iter240 = this.tableStats[iter240];
        iter240.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionsStatsResult = module.exports.PartitionsStatsResult = function(args) {
  this.partStats = null;
  if (args) {
    if (args.partStats !== undefined && args.partStats !== null) {
      this.partStats = Thrift.copyMap(args.partStats, [Thrift.copyList, ttypes.ColumnStatisticsObj]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partStats is unset!');
    }
  }
};
PartitionsStatsResult.prototype = {};
PartitionsStatsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.partStats = {};
        var _rtmp3242 = input.readMapBegin();
        var _size241 = _rtmp3242.size || 0;
        for (var _i243 = 0; _i243 < _size241; ++_i243) {
          var key244 = null;
          var val245 = null;
          key244 = input.readString();
          val245 = [];
          var _rtmp3247 = input.readListBegin();
          var _size246 = _rtmp3247.size || 0;
          for (var _i248 = 0; _i248 < _size246; ++_i248) {
            var elem249 = null;
            elem249 = new ttypes.ColumnStatisticsObj();
            elem249.read(input);
            val245.push(elem249);
          }
          input.readListEnd();
          this.partStats[key244] = val245;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsStatsResult.prototype.write = function(output) {
  output.writeStructBegin('PartitionsStatsResult');
  if (this.partStats !== null && this.partStats !== undefined) {
    output.writeFieldBegin('partStats', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.partStats));
    for (var kiter250 in this.partStats) {
      if (this.partStats.hasOwnProperty(kiter250)) {
        var viter251 = this.partStats[kiter250];
        output.writeString(kiter250);
        output.writeListBegin(Thrift.Type.STRUCT, viter251.length);
        for (var iter252 in viter251) {
          if (viter251.hasOwnProperty(iter252)) {
            iter252 = viter251[iter252];
            iter252.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableStatsRequest = module.exports.TableStatsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.colNames = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.colNames !== undefined && args.colNames !== null) {
      this.colNames = Thrift.copyList(args.colNames, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colNames is unset!');
    }
  }
};
TableStatsRequest.prototype = {};
TableStatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.colNames = [];
        var _rtmp3254 = input.readListBegin();
        var _size253 = _rtmp3254.size || 0;
        for (var _i255 = 0; _i255 < _size253; ++_i255) {
          var elem256 = null;
          elem256 = input.readString();
          this.colNames.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatsRequest.prototype.write = function(output) {
  output.writeStructBegin('TableStatsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.colNames !== null && this.colNames !== undefined) {
    output.writeFieldBegin('colNames', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.colNames.length);
    for (var iter257 in this.colNames) {
      if (this.colNames.hasOwnProperty(iter257)) {
        iter257 = this.colNames[iter257];
        output.writeString(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartitionsStatsRequest = module.exports.PartitionsStatsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.colNames = null;
  this.partNames = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.colNames !== undefined && args.colNames !== null) {
      this.colNames = Thrift.copyList(args.colNames, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colNames is unset!');
    }
    if (args.partNames !== undefined && args.partNames !== null) {
      this.partNames = Thrift.copyList(args.partNames, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partNames is unset!');
    }
  }
};
PartitionsStatsRequest.prototype = {};
PartitionsStatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.colNames = [];
        var _rtmp3259 = input.readListBegin();
        var _size258 = _rtmp3259.size || 0;
        for (var _i260 = 0; _i260 < _size258; ++_i260) {
          var elem261 = null;
          elem261 = input.readString();
          this.colNames.push(elem261);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.partNames = [];
        var _rtmp3263 = input.readListBegin();
        var _size262 = _rtmp3263.size || 0;
        for (var _i264 = 0; _i264 < _size262; ++_i264) {
          var elem265 = null;
          elem265 = input.readString();
          this.partNames.push(elem265);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartitionsStatsRequest.prototype.write = function(output) {
  output.writeStructBegin('PartitionsStatsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.colNames !== null && this.colNames !== undefined) {
    output.writeFieldBegin('colNames', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.colNames.length);
    for (var iter266 in this.colNames) {
      if (this.colNames.hasOwnProperty(iter266)) {
        iter266 = this.colNames[iter266];
        output.writeString(iter266);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.partNames !== null && this.partNames !== undefined) {
    output.writeFieldBegin('partNames', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partNames.length);
    for (var iter267 in this.partNames) {
      if (this.partNames.hasOwnProperty(iter267)) {
        iter267 = this.partNames[iter267];
        output.writeString(iter267);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddPartitionsResult = module.exports.AddPartitionsResult = function(args) {
  this.partitions = null;
  if (args) {
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [ttypes.Partition]);
    }
  }
};
AddPartitionsResult.prototype = {};
AddPartitionsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.partitions = [];
        var _rtmp3269 = input.readListBegin();
        var _size268 = _rtmp3269.size || 0;
        for (var _i270 = 0; _i270 < _size268; ++_i270) {
          var elem271 = null;
          elem271 = new ttypes.Partition();
          elem271.read(input);
          this.partitions.push(elem271);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPartitionsResult.prototype.write = function(output) {
  output.writeStructBegin('AddPartitionsResult');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter272 in this.partitions) {
      if (this.partitions.hasOwnProperty(iter272)) {
        iter272 = this.partitions[iter272];
        iter272.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddPartitionsRequest = module.exports.AddPartitionsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.parts = null;
  this.ifNotExists = null;
  this.needResult = true;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.parts !== undefined && args.parts !== null) {
      this.parts = Thrift.copyList(args.parts, [ttypes.Partition]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parts is unset!');
    }
    if (args.ifNotExists !== undefined && args.ifNotExists !== null) {
      this.ifNotExists = args.ifNotExists;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ifNotExists is unset!');
    }
    if (args.needResult !== undefined && args.needResult !== null) {
      this.needResult = args.needResult;
    }
  }
};
AddPartitionsRequest.prototype = {};
AddPartitionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.parts = [];
        var _rtmp3274 = input.readListBegin();
        var _size273 = _rtmp3274.size || 0;
        for (var _i275 = 0; _i275 < _size273; ++_i275) {
          var elem276 = null;
          elem276 = new ttypes.Partition();
          elem276.read(input);
          this.parts.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.ifNotExists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.needResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddPartitionsRequest.prototype.write = function(output) {
  output.writeStructBegin('AddPartitionsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.parts !== null && this.parts !== undefined) {
    output.writeFieldBegin('parts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.parts.length);
    for (var iter277 in this.parts) {
      if (this.parts.hasOwnProperty(iter277)) {
        iter277 = this.parts[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ifNotExists !== null && this.ifNotExists !== undefined) {
    output.writeFieldBegin('ifNotExists', Thrift.Type.BOOL, 4);
    output.writeBool(this.ifNotExists);
    output.writeFieldEnd();
  }
  if (this.needResult !== null && this.needResult !== undefined) {
    output.writeFieldBegin('needResult', Thrift.Type.BOOL, 5);
    output.writeBool(this.needResult);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DropPartitionsResult = module.exports.DropPartitionsResult = function(args) {
  this.partitions = null;
  if (args) {
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [ttypes.Partition]);
    }
  }
};
DropPartitionsResult.prototype = {};
DropPartitionsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.partitions = [];
        var _rtmp3279 = input.readListBegin();
        var _size278 = _rtmp3279.size || 0;
        for (var _i280 = 0; _i280 < _size278; ++_i280) {
          var elem281 = null;
          elem281 = new ttypes.Partition();
          elem281.read(input);
          this.partitions.push(elem281);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropPartitionsResult.prototype.write = function(output) {
  output.writeStructBegin('DropPartitionsResult');
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter282 in this.partitions) {
      if (this.partitions.hasOwnProperty(iter282)) {
        iter282 = this.partitions[iter282];
        iter282.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DropPartitionsExpr = module.exports.DropPartitionsExpr = function(args) {
  this.expr = null;
  this.partArchiveLevel = null;
  if (args) {
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expr is unset!');
    }
    if (args.partArchiveLevel !== undefined && args.partArchiveLevel !== null) {
      this.partArchiveLevel = args.partArchiveLevel;
    }
  }
};
DropPartitionsExpr.prototype = {};
DropPartitionsExpr.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partArchiveLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropPartitionsExpr.prototype.write = function(output) {
  output.writeStructBegin('DropPartitionsExpr');
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 1);
    output.writeBinary(this.expr);
    output.writeFieldEnd();
  }
  if (this.partArchiveLevel !== null && this.partArchiveLevel !== undefined) {
    output.writeFieldBegin('partArchiveLevel', Thrift.Type.I32, 2);
    output.writeI32(this.partArchiveLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestPartsSpec = module.exports.RequestPartsSpec = function(args) {
  this.names = null;
  this.exprs = null;
  if (args) {
    if (args.names !== undefined && args.names !== null) {
      this.names = Thrift.copyList(args.names, [null]);
    }
    if (args.exprs !== undefined && args.exprs !== null) {
      this.exprs = Thrift.copyList(args.exprs, [ttypes.DropPartitionsExpr]);
    }
  }
};
RequestPartsSpec.prototype = {};
RequestPartsSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.names = [];
        var _rtmp3284 = input.readListBegin();
        var _size283 = _rtmp3284.size || 0;
        for (var _i285 = 0; _i285 < _size283; ++_i285) {
          var elem286 = null;
          elem286 = input.readString();
          this.names.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.exprs = [];
        var _rtmp3288 = input.readListBegin();
        var _size287 = _rtmp3288.size || 0;
        for (var _i289 = 0; _i289 < _size287; ++_i289) {
          var elem290 = null;
          elem290 = new ttypes.DropPartitionsExpr();
          elem290.read(input);
          this.exprs.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestPartsSpec.prototype.write = function(output) {
  output.writeStructBegin('RequestPartsSpec');
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.names.length);
    for (var iter291 in this.names) {
      if (this.names.hasOwnProperty(iter291)) {
        iter291 = this.names[iter291];
        output.writeString(iter291);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exprs !== null && this.exprs !== undefined) {
    output.writeFieldBegin('exprs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.exprs.length);
    for (var iter292 in this.exprs) {
      if (this.exprs.hasOwnProperty(iter292)) {
        iter292 = this.exprs[iter292];
        iter292.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DropPartitionsRequest = module.exports.DropPartitionsRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.parts = null;
  this.deleteData = null;
  this.ifExists = true;
  this.ignoreProtection = null;
  this.environmentContext = null;
  this.needResult = true;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.parts !== undefined && args.parts !== null) {
      this.parts = new ttypes.RequestPartsSpec(args.parts);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parts is unset!');
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData;
    }
    if (args.ifExists !== undefined && args.ifExists !== null) {
      this.ifExists = args.ifExists;
    }
    if (args.ignoreProtection !== undefined && args.ignoreProtection !== null) {
      this.ignoreProtection = args.ignoreProtection;
    }
    if (args.environmentContext !== undefined && args.environmentContext !== null) {
      this.environmentContext = new ttypes.EnvironmentContext(args.environmentContext);
    }
    if (args.needResult !== undefined && args.needResult !== null) {
      this.needResult = args.needResult;
    }
  }
};
DropPartitionsRequest.prototype = {};
DropPartitionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.parts = new ttypes.RequestPartsSpec();
        this.parts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.ifExists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreProtection = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.environmentContext = new ttypes.EnvironmentContext();
        this.environmentContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.needResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DropPartitionsRequest.prototype.write = function(output) {
  output.writeStructBegin('DropPartitionsRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.parts !== null && this.parts !== undefined) {
    output.writeFieldBegin('parts', Thrift.Type.STRUCT, 3);
    this.parts.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.ifExists !== null && this.ifExists !== undefined) {
    output.writeFieldBegin('ifExists', Thrift.Type.BOOL, 5);
    output.writeBool(this.ifExists);
    output.writeFieldEnd();
  }
  if (this.ignoreProtection !== null && this.ignoreProtection !== undefined) {
    output.writeFieldBegin('ignoreProtection', Thrift.Type.BOOL, 6);
    output.writeBool(this.ignoreProtection);
    output.writeFieldEnd();
  }
  if (this.environmentContext !== null && this.environmentContext !== undefined) {
    output.writeFieldBegin('environmentContext', Thrift.Type.STRUCT, 7);
    this.environmentContext.write(output);
    output.writeFieldEnd();
  }
  if (this.needResult !== null && this.needResult !== undefined) {
    output.writeFieldBegin('needResult', Thrift.Type.BOOL, 8);
    output.writeBool(this.needResult);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ResourceUri = module.exports.ResourceUri = function(args) {
  this.resourceType = null;
  this.uri = null;
  if (args) {
    if (args.resourceType !== undefined && args.resourceType !== null) {
      this.resourceType = args.resourceType;
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
  }
};
ResourceUri.prototype = {};
ResourceUri.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.resourceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceUri.prototype.write = function(output) {
  output.writeStructBegin('ResourceUri');
  if (this.resourceType !== null && this.resourceType !== undefined) {
    output.writeFieldBegin('resourceType', Thrift.Type.I32, 1);
    output.writeI32(this.resourceType);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Function = module.exports.Function = function(args) {
  this.functionName = null;
  this.dbName = null;
  this.className = null;
  this.ownerName = null;
  this.ownerType = null;
  this.createTime = null;
  this.functionType = null;
  this.resourceUris = null;
  if (args) {
    if (args.functionName !== undefined && args.functionName !== null) {
      this.functionName = args.functionName;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.className !== undefined && args.className !== null) {
      this.className = args.className;
    }
    if (args.ownerName !== undefined && args.ownerName !== null) {
      this.ownerName = args.ownerName;
    }
    if (args.ownerType !== undefined && args.ownerType !== null) {
      this.ownerType = args.ownerType;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.functionType !== undefined && args.functionType !== null) {
      this.functionType = args.functionType;
    }
    if (args.resourceUris !== undefined && args.resourceUris !== null) {
      this.resourceUris = Thrift.copyList(args.resourceUris, [ttypes.ResourceUri]);
    }
  }
};
Function.prototype = {};
Function.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ownerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.functionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.resourceUris = [];
        var _rtmp3294 = input.readListBegin();
        var _size293 = _rtmp3294.size || 0;
        for (var _i295 = 0; _i295 < _size293; ++_i295) {
          var elem296 = null;
          elem296 = new ttypes.ResourceUri();
          elem296.read(input);
          this.resourceUris.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Function.prototype.write = function(output) {
  output.writeStructBegin('Function');
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 1);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.className !== null && this.className !== undefined) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 3);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 4);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  if (this.ownerType !== null && this.ownerType !== undefined) {
    output.writeFieldBegin('ownerType', Thrift.Type.I32, 5);
    output.writeI32(this.ownerType);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 6);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.functionType !== null && this.functionType !== undefined) {
    output.writeFieldBegin('functionType', Thrift.Type.I32, 7);
    output.writeI32(this.functionType);
    output.writeFieldEnd();
  }
  if (this.resourceUris !== null && this.resourceUris !== undefined) {
    output.writeFieldBegin('resourceUris', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resourceUris.length);
    for (var iter297 in this.resourceUris) {
      if (this.resourceUris.hasOwnProperty(iter297)) {
        iter297 = this.resourceUris[iter297];
        iter297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TxnInfo = module.exports.TxnInfo = function(args) {
  this.id = null;
  this.state = null;
  this.user = null;
  this.hostname = null;
  this.agentInfo = 'Unknown';
  this.heartbeatCount = 0;
  this.metaInfo = null;
  this.startedTime = null;
  this.lastHeartbeatTime = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
    if (args.agentInfo !== undefined && args.agentInfo !== null) {
      this.agentInfo = args.agentInfo;
    }
    if (args.heartbeatCount !== undefined && args.heartbeatCount !== null) {
      this.heartbeatCount = args.heartbeatCount;
    }
    if (args.metaInfo !== undefined && args.metaInfo !== null) {
      this.metaInfo = args.metaInfo;
    }
    if (args.startedTime !== undefined && args.startedTime !== null) {
      this.startedTime = args.startedTime;
    }
    if (args.lastHeartbeatTime !== undefined && args.lastHeartbeatTime !== null) {
      this.lastHeartbeatTime = args.lastHeartbeatTime;
    }
  }
};
TxnInfo.prototype = {};
TxnInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.agentInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.heartbeatCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.metaInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.lastHeartbeatTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TxnInfo.prototype.write = function(output) {
  output.writeStructBegin('TxnInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 3);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 4);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.agentInfo !== null && this.agentInfo !== undefined) {
    output.writeFieldBegin('agentInfo', Thrift.Type.STRING, 5);
    output.writeString(this.agentInfo);
    output.writeFieldEnd();
  }
  if (this.heartbeatCount !== null && this.heartbeatCount !== undefined) {
    output.writeFieldBegin('heartbeatCount', Thrift.Type.I32, 6);
    output.writeI32(this.heartbeatCount);
    output.writeFieldEnd();
  }
  if (this.metaInfo !== null && this.metaInfo !== undefined) {
    output.writeFieldBegin('metaInfo', Thrift.Type.STRING, 7);
    output.writeString(this.metaInfo);
    output.writeFieldEnd();
  }
  if (this.startedTime !== null && this.startedTime !== undefined) {
    output.writeFieldBegin('startedTime', Thrift.Type.I64, 8);
    output.writeI64(this.startedTime);
    output.writeFieldEnd();
  }
  if (this.lastHeartbeatTime !== null && this.lastHeartbeatTime !== undefined) {
    output.writeFieldBegin('lastHeartbeatTime', Thrift.Type.I64, 9);
    output.writeI64(this.lastHeartbeatTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetOpenTxnsInfoResponse = module.exports.GetOpenTxnsInfoResponse = function(args) {
  this.txn_high_water_mark = null;
  this.open_txns = null;
  if (args) {
    if (args.txn_high_water_mark !== undefined && args.txn_high_water_mark !== null) {
      this.txn_high_water_mark = args.txn_high_water_mark;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_high_water_mark is unset!');
    }
    if (args.open_txns !== undefined && args.open_txns !== null) {
      this.open_txns = Thrift.copyList(args.open_txns, [ttypes.TxnInfo]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field open_txns is unset!');
    }
  }
};
GetOpenTxnsInfoResponse.prototype = {};
GetOpenTxnsInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txn_high_water_mark = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.open_txns = [];
        var _rtmp3299 = input.readListBegin();
        var _size298 = _rtmp3299.size || 0;
        for (var _i300 = 0; _i300 < _size298; ++_i300) {
          var elem301 = null;
          elem301 = new ttypes.TxnInfo();
          elem301.read(input);
          this.open_txns.push(elem301);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetOpenTxnsInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetOpenTxnsInfoResponse');
  if (this.txn_high_water_mark !== null && this.txn_high_water_mark !== undefined) {
    output.writeFieldBegin('txn_high_water_mark', Thrift.Type.I64, 1);
    output.writeI64(this.txn_high_water_mark);
    output.writeFieldEnd();
  }
  if (this.open_txns !== null && this.open_txns !== undefined) {
    output.writeFieldBegin('open_txns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.open_txns.length);
    for (var iter302 in this.open_txns) {
      if (this.open_txns.hasOwnProperty(iter302)) {
        iter302 = this.open_txns[iter302];
        iter302.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetOpenTxnsResponse = module.exports.GetOpenTxnsResponse = function(args) {
  this.txn_high_water_mark = null;
  this.open_txns = null;
  this.min_open_txn = null;
  if (args) {
    if (args.txn_high_water_mark !== undefined && args.txn_high_water_mark !== null) {
      this.txn_high_water_mark = args.txn_high_water_mark;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_high_water_mark is unset!');
    }
    if (args.open_txns !== undefined && args.open_txns !== null) {
      this.open_txns = Thrift.copyList(args.open_txns, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field open_txns is unset!');
    }
    if (args.min_open_txn !== undefined && args.min_open_txn !== null) {
      this.min_open_txn = args.min_open_txn;
    }
  }
};
GetOpenTxnsResponse.prototype = {};
GetOpenTxnsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txn_high_water_mark = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.open_txns = [];
        var _rtmp3304 = input.readSetBegin();
        var _size303 = _rtmp3304.size || 0;
        for (var _i305 = 0; _i305 < _size303; ++_i305) {
          var elem306 = null;
          elem306 = input.readI64();
          this.open_txns.push(elem306);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.min_open_txn = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetOpenTxnsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetOpenTxnsResponse');
  if (this.txn_high_water_mark !== null && this.txn_high_water_mark !== undefined) {
    output.writeFieldBegin('txn_high_water_mark', Thrift.Type.I64, 1);
    output.writeI64(this.txn_high_water_mark);
    output.writeFieldEnd();
  }
  if (this.open_txns !== null && this.open_txns !== undefined) {
    output.writeFieldBegin('open_txns', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.open_txns.length);
    for (var iter307 in this.open_txns) {
      if (this.open_txns.hasOwnProperty(iter307)) {
        iter307 = this.open_txns[iter307];
        output.writeI64(iter307);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.min_open_txn !== null && this.min_open_txn !== undefined) {
    output.writeFieldBegin('min_open_txn', Thrift.Type.I64, 3);
    output.writeI64(this.min_open_txn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OpenTxnRequest = module.exports.OpenTxnRequest = function(args) {
  this.num_txns = null;
  this.user = null;
  this.hostname = null;
  this.agentInfo = 'Unknown';
  if (args) {
    if (args.num_txns !== undefined && args.num_txns !== null) {
      this.num_txns = args.num_txns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field num_txns is unset!');
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
    if (args.agentInfo !== undefined && args.agentInfo !== null) {
      this.agentInfo = args.agentInfo;
    }
  }
};
OpenTxnRequest.prototype = {};
OpenTxnRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_txns = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.agentInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenTxnRequest.prototype.write = function(output) {
  output.writeStructBegin('OpenTxnRequest');
  if (this.num_txns !== null && this.num_txns !== undefined) {
    output.writeFieldBegin('num_txns', Thrift.Type.I32, 1);
    output.writeI32(this.num_txns);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 3);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.agentInfo !== null && this.agentInfo !== undefined) {
    output.writeFieldBegin('agentInfo', Thrift.Type.STRING, 4);
    output.writeString(this.agentInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OpenTxnsResponse = module.exports.OpenTxnsResponse = function(args) {
  this.txn_ids = null;
  if (args) {
    if (args.txn_ids !== undefined && args.txn_ids !== null) {
      this.txn_ids = Thrift.copyList(args.txn_ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_ids is unset!');
    }
  }
};
OpenTxnsResponse.prototype = {};
OpenTxnsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.txn_ids = [];
        var _rtmp3309 = input.readListBegin();
        var _size308 = _rtmp3309.size || 0;
        for (var _i310 = 0; _i310 < _size308; ++_i310) {
          var elem311 = null;
          elem311 = input.readI64();
          this.txn_ids.push(elem311);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenTxnsResponse.prototype.write = function(output) {
  output.writeStructBegin('OpenTxnsResponse');
  if (this.txn_ids !== null && this.txn_ids !== undefined) {
    output.writeFieldBegin('txn_ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.txn_ids.length);
    for (var iter312 in this.txn_ids) {
      if (this.txn_ids.hasOwnProperty(iter312)) {
        iter312 = this.txn_ids[iter312];
        output.writeI64(iter312);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AbortTxnRequest = module.exports.AbortTxnRequest = function(args) {
  this.txnid = null;
  if (args) {
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txnid is unset!');
    }
  }
};
AbortTxnRequest.prototype = {};
AbortTxnRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AbortTxnRequest.prototype.write = function(output) {
  output.writeStructBegin('AbortTxnRequest');
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 1);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AbortTxnsRequest = module.exports.AbortTxnsRequest = function(args) {
  this.txn_ids = null;
  if (args) {
    if (args.txn_ids !== undefined && args.txn_ids !== null) {
      this.txn_ids = Thrift.copyList(args.txn_ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txn_ids is unset!');
    }
  }
};
AbortTxnsRequest.prototype = {};
AbortTxnsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.txn_ids = [];
        var _rtmp3314 = input.readListBegin();
        var _size313 = _rtmp3314.size || 0;
        for (var _i315 = 0; _i315 < _size313; ++_i315) {
          var elem316 = null;
          elem316 = input.readI64();
          this.txn_ids.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AbortTxnsRequest.prototype.write = function(output) {
  output.writeStructBegin('AbortTxnsRequest');
  if (this.txn_ids !== null && this.txn_ids !== undefined) {
    output.writeFieldBegin('txn_ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.txn_ids.length);
    for (var iter317 in this.txn_ids) {
      if (this.txn_ids.hasOwnProperty(iter317)) {
        iter317 = this.txn_ids[iter317];
        output.writeI64(iter317);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommitTxnRequest = module.exports.CommitTxnRequest = function(args) {
  this.txnid = null;
  if (args) {
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txnid is unset!');
    }
  }
};
CommitTxnRequest.prototype = {};
CommitTxnRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitTxnRequest.prototype.write = function(output) {
  output.writeStructBegin('CommitTxnRequest');
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 1);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LockComponent = module.exports.LockComponent = function(args) {
  this.type = null;
  this.level = null;
  this.dbname = null;
  this.tablename = null;
  this.partitionname = null;
  this.operationType = 5;
  this.isAcid = false;
  this.isDynamicPartitionWrite = false;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field level is unset!');
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    }
    if (args.partitionname !== undefined && args.partitionname !== null) {
      this.partitionname = args.partitionname;
    }
    if (args.operationType !== undefined && args.operationType !== null) {
      this.operationType = args.operationType;
    }
    if (args.isAcid !== undefined && args.isAcid !== null) {
      this.isAcid = args.isAcid;
    }
    if (args.isDynamicPartitionWrite !== undefined && args.isDynamicPartitionWrite !== null) {
      this.isDynamicPartitionWrite = args.isDynamicPartitionWrite;
    }
  }
};
LockComponent.prototype = {};
LockComponent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.partitionname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.operationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isAcid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isDynamicPartitionWrite = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockComponent.prototype.write = function(output) {
  output.writeStructBegin('LockComponent');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 4);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionname !== null && this.partitionname !== undefined) {
    output.writeFieldBegin('partitionname', Thrift.Type.STRING, 5);
    output.writeString(this.partitionname);
    output.writeFieldEnd();
  }
  if (this.operationType !== null && this.operationType !== undefined) {
    output.writeFieldBegin('operationType', Thrift.Type.I32, 6);
    output.writeI32(this.operationType);
    output.writeFieldEnd();
  }
  if (this.isAcid !== null && this.isAcid !== undefined) {
    output.writeFieldBegin('isAcid', Thrift.Type.BOOL, 7);
    output.writeBool(this.isAcid);
    output.writeFieldEnd();
  }
  if (this.isDynamicPartitionWrite !== null && this.isDynamicPartitionWrite !== undefined) {
    output.writeFieldBegin('isDynamicPartitionWrite', Thrift.Type.BOOL, 8);
    output.writeBool(this.isDynamicPartitionWrite);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LockRequest = module.exports.LockRequest = function(args) {
  this.component = null;
  this.txnid = null;
  this.user = null;
  this.hostname = null;
  this.agentInfo = 'Unknown';
  if (args) {
    if (args.component !== undefined && args.component !== null) {
      this.component = Thrift.copyList(args.component, [ttypes.LockComponent]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field component is unset!');
    }
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
    if (args.agentInfo !== undefined && args.agentInfo !== null) {
      this.agentInfo = args.agentInfo;
    }
  }
};
LockRequest.prototype = {};
LockRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.component = [];
        var _rtmp3319 = input.readListBegin();
        var _size318 = _rtmp3319.size || 0;
        for (var _i320 = 0; _i320 < _size318; ++_i320) {
          var elem321 = null;
          elem321 = new ttypes.LockComponent();
          elem321.read(input);
          this.component.push(elem321);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.agentInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockRequest.prototype.write = function(output) {
  output.writeStructBegin('LockRequest');
  if (this.component !== null && this.component !== undefined) {
    output.writeFieldBegin('component', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.component.length);
    for (var iter322 in this.component) {
      if (this.component.hasOwnProperty(iter322)) {
        iter322 = this.component[iter322];
        iter322.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 2);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 3);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 4);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.agentInfo !== null && this.agentInfo !== undefined) {
    output.writeFieldBegin('agentInfo', Thrift.Type.STRING, 5);
    output.writeString(this.agentInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LockResponse = module.exports.LockResponse = function(args) {
  this.lockid = null;
  this.state = null;
  if (args) {
    if (args.lockid !== undefined && args.lockid !== null) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
  }
};
LockResponse.prototype = {};
LockResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockResponse.prototype.write = function(output) {
  output.writeStructBegin('LockResponse');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckLockRequest = module.exports.CheckLockRequest = function(args) {
  this.lockid = null;
  this.txnid = null;
  this.elapsed_ms = null;
  if (args) {
    if (args.lockid !== undefined && args.lockid !== null) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    }
    if (args.elapsed_ms !== undefined && args.elapsed_ms !== null) {
      this.elapsed_ms = args.elapsed_ms;
    }
  }
};
CheckLockRequest.prototype = {};
CheckLockRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.elapsed_ms = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckLockRequest.prototype.write = function(output) {
  output.writeStructBegin('CheckLockRequest');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 2);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  if (this.elapsed_ms !== null && this.elapsed_ms !== undefined) {
    output.writeFieldBegin('elapsed_ms', Thrift.Type.I64, 3);
    output.writeI64(this.elapsed_ms);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnlockRequest = module.exports.UnlockRequest = function(args) {
  this.lockid = null;
  if (args) {
    if (args.lockid !== undefined && args.lockid !== null) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
  }
};
UnlockRequest.prototype = {};
UnlockRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnlockRequest.prototype.write = function(output) {
  output.writeStructBegin('UnlockRequest');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowLocksRequest = module.exports.ShowLocksRequest = function(args) {
  this.dbname = null;
  this.tablename = null;
  this.partname = null;
  this.isExtended = false;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    }
    if (args.partname !== undefined && args.partname !== null) {
      this.partname = args.partname;
    }
    if (args.isExtended !== undefined && args.isExtended !== null) {
      this.isExtended = args.isExtended;
    }
  }
};
ShowLocksRequest.prototype = {};
ShowLocksRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isExtended = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowLocksRequest.prototype.write = function(output) {
  output.writeStructBegin('ShowLocksRequest');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 2);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partname !== null && this.partname !== undefined) {
    output.writeFieldBegin('partname', Thrift.Type.STRING, 3);
    output.writeString(this.partname);
    output.writeFieldEnd();
  }
  if (this.isExtended !== null && this.isExtended !== undefined) {
    output.writeFieldBegin('isExtended', Thrift.Type.BOOL, 4);
    output.writeBool(this.isExtended);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowLocksResponseElement = module.exports.ShowLocksResponseElement = function(args) {
  this.lockid = null;
  this.dbname = null;
  this.tablename = null;
  this.partname = null;
  this.state = null;
  this.type = null;
  this.txnid = null;
  this.lastheartbeat = null;
  this.acquiredat = null;
  this.user = null;
  this.hostname = null;
  this.heartbeatCount = 0;
  this.agentInfo = null;
  this.blockedByExtId = null;
  this.blockedByIntId = null;
  this.lockIdInternal = null;
  if (args) {
    if (args.lockid !== undefined && args.lockid !== null) {
      this.lockid = args.lockid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lockid is unset!');
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    }
    if (args.partname !== undefined && args.partname !== null) {
      this.partname = args.partname;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    }
    if (args.lastheartbeat !== undefined && args.lastheartbeat !== null) {
      this.lastheartbeat = args.lastheartbeat;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastheartbeat is unset!');
    }
    if (args.acquiredat !== undefined && args.acquiredat !== null) {
      this.acquiredat = args.acquiredat;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
    if (args.heartbeatCount !== undefined && args.heartbeatCount !== null) {
      this.heartbeatCount = args.heartbeatCount;
    }
    if (args.agentInfo !== undefined && args.agentInfo !== null) {
      this.agentInfo = args.agentInfo;
    }
    if (args.blockedByExtId !== undefined && args.blockedByExtId !== null) {
      this.blockedByExtId = args.blockedByExtId;
    }
    if (args.blockedByIntId !== undefined && args.blockedByIntId !== null) {
      this.blockedByIntId = args.blockedByIntId;
    }
    if (args.lockIdInternal !== undefined && args.lockIdInternal !== null) {
      this.lockIdInternal = args.lockIdInternal;
    }
  }
};
ShowLocksResponseElement.prototype = {};
ShowLocksResponseElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.partname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.lastheartbeat = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.acquiredat = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.heartbeatCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.agentInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.blockedByExtId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.blockedByIntId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.lockIdInternal = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowLocksResponseElement.prototype.write = function(output) {
  output.writeStructBegin('ShowLocksResponseElement');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 3);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partname !== null && this.partname !== undefined) {
    output.writeFieldBegin('partname', Thrift.Type.STRING, 4);
    output.writeString(this.partname);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 7);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  if (this.lastheartbeat !== null && this.lastheartbeat !== undefined) {
    output.writeFieldBegin('lastheartbeat', Thrift.Type.I64, 8);
    output.writeI64(this.lastheartbeat);
    output.writeFieldEnd();
  }
  if (this.acquiredat !== null && this.acquiredat !== undefined) {
    output.writeFieldBegin('acquiredat', Thrift.Type.I64, 9);
    output.writeI64(this.acquiredat);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 10);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 11);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.heartbeatCount !== null && this.heartbeatCount !== undefined) {
    output.writeFieldBegin('heartbeatCount', Thrift.Type.I32, 12);
    output.writeI32(this.heartbeatCount);
    output.writeFieldEnd();
  }
  if (this.agentInfo !== null && this.agentInfo !== undefined) {
    output.writeFieldBegin('agentInfo', Thrift.Type.STRING, 13);
    output.writeString(this.agentInfo);
    output.writeFieldEnd();
  }
  if (this.blockedByExtId !== null && this.blockedByExtId !== undefined) {
    output.writeFieldBegin('blockedByExtId', Thrift.Type.I64, 14);
    output.writeI64(this.blockedByExtId);
    output.writeFieldEnd();
  }
  if (this.blockedByIntId !== null && this.blockedByIntId !== undefined) {
    output.writeFieldBegin('blockedByIntId', Thrift.Type.I64, 15);
    output.writeI64(this.blockedByIntId);
    output.writeFieldEnd();
  }
  if (this.lockIdInternal !== null && this.lockIdInternal !== undefined) {
    output.writeFieldBegin('lockIdInternal', Thrift.Type.I64, 16);
    output.writeI64(this.lockIdInternal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowLocksResponse = module.exports.ShowLocksResponse = function(args) {
  this.locks = null;
  if (args) {
    if (args.locks !== undefined && args.locks !== null) {
      this.locks = Thrift.copyList(args.locks, [ttypes.ShowLocksResponseElement]);
    }
  }
};
ShowLocksResponse.prototype = {};
ShowLocksResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.locks = [];
        var _rtmp3324 = input.readListBegin();
        var _size323 = _rtmp3324.size || 0;
        for (var _i325 = 0; _i325 < _size323; ++_i325) {
          var elem326 = null;
          elem326 = new ttypes.ShowLocksResponseElement();
          elem326.read(input);
          this.locks.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowLocksResponse.prototype.write = function(output) {
  output.writeStructBegin('ShowLocksResponse');
  if (this.locks !== null && this.locks !== undefined) {
    output.writeFieldBegin('locks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.locks.length);
    for (var iter327 in this.locks) {
      if (this.locks.hasOwnProperty(iter327)) {
        iter327 = this.locks[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HeartbeatRequest = module.exports.HeartbeatRequest = function(args) {
  this.lockid = null;
  this.txnid = null;
  if (args) {
    if (args.lockid !== undefined && args.lockid !== null) {
      this.lockid = args.lockid;
    }
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    }
  }
};
HeartbeatRequest.prototype = {};
HeartbeatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lockid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatRequest.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatRequest');
  if (this.lockid !== null && this.lockid !== undefined) {
    output.writeFieldBegin('lockid', Thrift.Type.I64, 1);
    output.writeI64(this.lockid);
    output.writeFieldEnd();
  }
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 2);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HeartbeatTxnRangeRequest = module.exports.HeartbeatTxnRangeRequest = function(args) {
  this.min = null;
  this.max = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field min is unset!');
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max is unset!');
    }
  }
};
HeartbeatTxnRangeRequest.prototype = {};
HeartbeatTxnRangeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.min = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.max = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatTxnRangeRequest.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatTxnRangeRequest');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I64, 1);
    output.writeI64(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I64, 2);
    output.writeI64(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HeartbeatTxnRangeResponse = module.exports.HeartbeatTxnRangeResponse = function(args) {
  this.aborted = null;
  this.nosuch = null;
  if (args) {
    if (args.aborted !== undefined && args.aborted !== null) {
      this.aborted = Thrift.copyList(args.aborted, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aborted is unset!');
    }
    if (args.nosuch !== undefined && args.nosuch !== null) {
      this.nosuch = Thrift.copyList(args.nosuch, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nosuch is unset!');
    }
  }
};
HeartbeatTxnRangeResponse.prototype = {};
HeartbeatTxnRangeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.aborted = [];
        var _rtmp3329 = input.readSetBegin();
        var _size328 = _rtmp3329.size || 0;
        for (var _i330 = 0; _i330 < _size328; ++_i330) {
          var elem331 = null;
          elem331 = input.readI64();
          this.aborted.push(elem331);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.nosuch = [];
        var _rtmp3333 = input.readSetBegin();
        var _size332 = _rtmp3333.size || 0;
        for (var _i334 = 0; _i334 < _size332; ++_i334) {
          var elem335 = null;
          elem335 = input.readI64();
          this.nosuch.push(elem335);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatTxnRangeResponse.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatTxnRangeResponse');
  if (this.aborted !== null && this.aborted !== undefined) {
    output.writeFieldBegin('aborted', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.aborted.length);
    for (var iter336 in this.aborted) {
      if (this.aborted.hasOwnProperty(iter336)) {
        iter336 = this.aborted[iter336];
        output.writeI64(iter336);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.nosuch !== null && this.nosuch !== undefined) {
    output.writeFieldBegin('nosuch', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.nosuch.length);
    for (var iter337 in this.nosuch) {
      if (this.nosuch.hasOwnProperty(iter337)) {
        iter337 = this.nosuch[iter337];
        output.writeI64(iter337);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompactionRequest = module.exports.CompactionRequest = function(args) {
  this.dbname = null;
  this.tablename = null;
  this.partitionname = null;
  this.type = null;
  this.runas = null;
  this.properties = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tablename is unset!');
    }
    if (args.partitionname !== undefined && args.partitionname !== null) {
      this.partitionname = args.partitionname;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.runas !== undefined && args.runas !== null) {
      this.runas = args.runas;
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
CompactionRequest.prototype = {};
CompactionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partitionname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.runas = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.properties = {};
        var _rtmp3339 = input.readMapBegin();
        var _size338 = _rtmp3339.size || 0;
        for (var _i340 = 0; _i340 < _size338; ++_i340) {
          var key341 = null;
          var val342 = null;
          key341 = input.readString();
          val342 = input.readString();
          this.properties[key341] = val342;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompactionRequest.prototype.write = function(output) {
  output.writeStructBegin('CompactionRequest');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 2);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionname !== null && this.partitionname !== undefined) {
    output.writeFieldBegin('partitionname', Thrift.Type.STRING, 3);
    output.writeString(this.partitionname);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.runas !== null && this.runas !== undefined) {
    output.writeFieldBegin('runas', Thrift.Type.STRING, 5);
    output.writeString(this.runas);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter343 in this.properties) {
      if (this.properties.hasOwnProperty(kiter343)) {
        var viter344 = this.properties[kiter343];
        output.writeString(kiter343);
        output.writeString(viter344);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompactionResponse = module.exports.CompactionResponse = function(args) {
  this.id = null;
  this.state = null;
  this.accepted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.accepted !== undefined && args.accepted !== null) {
      this.accepted = args.accepted;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accepted is unset!');
    }
  }
};
CompactionResponse.prototype = {};
CompactionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.accepted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompactionResponse.prototype.write = function(output) {
  output.writeStructBegin('CompactionResponse');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 2);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.accepted !== null && this.accepted !== undefined) {
    output.writeFieldBegin('accepted', Thrift.Type.BOOL, 3);
    output.writeBool(this.accepted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowCompactRequest = module.exports.ShowCompactRequest = function(args) {
};
ShowCompactRequest.prototype = {};
ShowCompactRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowCompactRequest.prototype.write = function(output) {
  output.writeStructBegin('ShowCompactRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowCompactResponseElement = module.exports.ShowCompactResponseElement = function(args) {
  this.dbname = null;
  this.tablename = null;
  this.partitionname = null;
  this.type = null;
  this.state = null;
  this.workerid = null;
  this.start = null;
  this.runAs = null;
  this.hightestTxnId = null;
  this.metaInfo = null;
  this.endTime = null;
  this.hadoopJobId = 'None';
  this.id = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tablename is unset!');
    }
    if (args.partitionname !== undefined && args.partitionname !== null) {
      this.partitionname = args.partitionname;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.workerid !== undefined && args.workerid !== null) {
      this.workerid = args.workerid;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.runAs !== undefined && args.runAs !== null) {
      this.runAs = args.runAs;
    }
    if (args.hightestTxnId !== undefined && args.hightestTxnId !== null) {
      this.hightestTxnId = args.hightestTxnId;
    }
    if (args.metaInfo !== undefined && args.metaInfo !== null) {
      this.metaInfo = args.metaInfo;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.hadoopJobId !== undefined && args.hadoopJobId !== null) {
      this.hadoopJobId = args.hadoopJobId;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ShowCompactResponseElement.prototype = {};
ShowCompactResponseElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partitionname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.workerid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.runAs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.hightestTxnId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.metaInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.hadoopJobId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowCompactResponseElement.prototype.write = function(output) {
  output.writeStructBegin('ShowCompactResponseElement');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 2);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionname !== null && this.partitionname !== undefined) {
    output.writeFieldBegin('partitionname', Thrift.Type.STRING, 3);
    output.writeString(this.partitionname);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 5);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.workerid !== null && this.workerid !== undefined) {
    output.writeFieldBegin('workerid', Thrift.Type.STRING, 6);
    output.writeString(this.workerid);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 7);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.runAs !== null && this.runAs !== undefined) {
    output.writeFieldBegin('runAs', Thrift.Type.STRING, 8);
    output.writeString(this.runAs);
    output.writeFieldEnd();
  }
  if (this.hightestTxnId !== null && this.hightestTxnId !== undefined) {
    output.writeFieldBegin('hightestTxnId', Thrift.Type.I64, 9);
    output.writeI64(this.hightestTxnId);
    output.writeFieldEnd();
  }
  if (this.metaInfo !== null && this.metaInfo !== undefined) {
    output.writeFieldBegin('metaInfo', Thrift.Type.STRING, 10);
    output.writeString(this.metaInfo);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 11);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.hadoopJobId !== null && this.hadoopJobId !== undefined) {
    output.writeFieldBegin('hadoopJobId', Thrift.Type.STRING, 12);
    output.writeString(this.hadoopJobId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 13);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShowCompactResponse = module.exports.ShowCompactResponse = function(args) {
  this.compacts = null;
  if (args) {
    if (args.compacts !== undefined && args.compacts !== null) {
      this.compacts = Thrift.copyList(args.compacts, [ttypes.ShowCompactResponseElement]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compacts is unset!');
    }
  }
};
ShowCompactResponse.prototype = {};
ShowCompactResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.compacts = [];
        var _rtmp3346 = input.readListBegin();
        var _size345 = _rtmp3346.size || 0;
        for (var _i347 = 0; _i347 < _size345; ++_i347) {
          var elem348 = null;
          elem348 = new ttypes.ShowCompactResponseElement();
          elem348.read(input);
          this.compacts.push(elem348);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShowCompactResponse.prototype.write = function(output) {
  output.writeStructBegin('ShowCompactResponse');
  if (this.compacts !== null && this.compacts !== undefined) {
    output.writeFieldBegin('compacts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.compacts.length);
    for (var iter349 in this.compacts) {
      if (this.compacts.hasOwnProperty(iter349)) {
        iter349 = this.compacts[iter349];
        iter349.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddDynamicPartitions = module.exports.AddDynamicPartitions = function(args) {
  this.txnid = null;
  this.dbname = null;
  this.tablename = null;
  this.partitionnames = null;
  this.operationType = 5;
  if (args) {
    if (args.txnid !== undefined && args.txnid !== null) {
      this.txnid = args.txnid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field txnid is unset!');
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbname is unset!');
    }
    if (args.tablename !== undefined && args.tablename !== null) {
      this.tablename = args.tablename;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tablename is unset!');
    }
    if (args.partitionnames !== undefined && args.partitionnames !== null) {
      this.partitionnames = Thrift.copyList(args.partitionnames, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partitionnames is unset!');
    }
    if (args.operationType !== undefined && args.operationType !== null) {
      this.operationType = args.operationType;
    }
  }
};
AddDynamicPartitions.prototype = {};
AddDynamicPartitions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.txnid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tablename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.partitionnames = [];
        var _rtmp3351 = input.readListBegin();
        var _size350 = _rtmp3351.size || 0;
        for (var _i352 = 0; _i352 < _size350; ++_i352) {
          var elem353 = null;
          elem353 = input.readString();
          this.partitionnames.push(elem353);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.operationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddDynamicPartitions.prototype.write = function(output) {
  output.writeStructBegin('AddDynamicPartitions');
  if (this.txnid !== null && this.txnid !== undefined) {
    output.writeFieldBegin('txnid', Thrift.Type.I64, 1);
    output.writeI64(this.txnid);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 2);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tablename !== null && this.tablename !== undefined) {
    output.writeFieldBegin('tablename', Thrift.Type.STRING, 3);
    output.writeString(this.tablename);
    output.writeFieldEnd();
  }
  if (this.partitionnames !== null && this.partitionnames !== undefined) {
    output.writeFieldBegin('partitionnames', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partitionnames.length);
    for (var iter354 in this.partitionnames) {
      if (this.partitionnames.hasOwnProperty(iter354)) {
        iter354 = this.partitionnames[iter354];
        output.writeString(iter354);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.operationType !== null && this.operationType !== undefined) {
    output.writeFieldBegin('operationType', Thrift.Type.I32, 5);
    output.writeI32(this.operationType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotificationEventRequest = module.exports.NotificationEventRequest = function(args) {
  this.lastEvent = null;
  this.maxEvents = null;
  if (args) {
    if (args.lastEvent !== undefined && args.lastEvent !== null) {
      this.lastEvent = args.lastEvent;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastEvent is unset!');
    }
    if (args.maxEvents !== undefined && args.maxEvents !== null) {
      this.maxEvents = args.maxEvents;
    }
  }
};
NotificationEventRequest.prototype = {};
NotificationEventRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lastEvent = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxEvents = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationEventRequest.prototype.write = function(output) {
  output.writeStructBegin('NotificationEventRequest');
  if (this.lastEvent !== null && this.lastEvent !== undefined) {
    output.writeFieldBegin('lastEvent', Thrift.Type.I64, 1);
    output.writeI64(this.lastEvent);
    output.writeFieldEnd();
  }
  if (this.maxEvents !== null && this.maxEvents !== undefined) {
    output.writeFieldBegin('maxEvents', Thrift.Type.I32, 2);
    output.writeI32(this.maxEvents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotificationEvent = module.exports.NotificationEvent = function(args) {
  this.eventId = null;
  this.eventTime = null;
  this.eventType = null;
  this.dbName = null;
  this.tableName = null;
  this.message = null;
  this.messageFormat = null;
  if (args) {
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventId is unset!');
    }
    if (args.eventTime !== undefined && args.eventTime !== null) {
      this.eventTime = args.eventTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventTime is unset!');
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventType is unset!');
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.messageFormat !== undefined && args.messageFormat !== null) {
      this.messageFormat = args.messageFormat;
    }
  }
};
NotificationEvent.prototype = {};
NotificationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.eventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.eventType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.messageFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationEvent.prototype.write = function(output) {
  output.writeStructBegin('NotificationEvent');
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I64, 1);
    output.writeI64(this.eventId);
    output.writeFieldEnd();
  }
  if (this.eventTime !== null && this.eventTime !== undefined) {
    output.writeFieldBegin('eventTime', Thrift.Type.I32, 2);
    output.writeI32(this.eventTime);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.STRING, 3);
    output.writeString(this.eventType);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 4);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 5);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.messageFormat !== null && this.messageFormat !== undefined) {
    output.writeFieldBegin('messageFormat', Thrift.Type.STRING, 7);
    output.writeString(this.messageFormat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotificationEventResponse = module.exports.NotificationEventResponse = function(args) {
  this.events = null;
  if (args) {
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [ttypes.NotificationEvent]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field events is unset!');
    }
  }
};
NotificationEventResponse.prototype = {};
NotificationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.events = [];
        var _rtmp3356 = input.readListBegin();
        var _size355 = _rtmp3356.size || 0;
        for (var _i357 = 0; _i357 < _size355; ++_i357) {
          var elem358 = null;
          elem358 = new ttypes.NotificationEvent();
          elem358.read(input);
          this.events.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('NotificationEventResponse');
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter359 in this.events) {
      if (this.events.hasOwnProperty(iter359)) {
        iter359 = this.events[iter359];
        iter359.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CurrentNotificationEventId = module.exports.CurrentNotificationEventId = function(args) {
  this.eventId = null;
  if (args) {
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventId is unset!');
    }
  }
};
CurrentNotificationEventId.prototype = {};
CurrentNotificationEventId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.eventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CurrentNotificationEventId.prototype.write = function(output) {
  output.writeStructBegin('CurrentNotificationEventId');
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I64, 1);
    output.writeI64(this.eventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InsertEventRequestData = module.exports.InsertEventRequestData = function(args) {
  this.filesAdded = null;
  this.filesAddedChecksum = null;
  if (args) {
    if (args.filesAdded !== undefined && args.filesAdded !== null) {
      this.filesAdded = Thrift.copyList(args.filesAdded, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filesAdded is unset!');
    }
    if (args.filesAddedChecksum !== undefined && args.filesAddedChecksum !== null) {
      this.filesAddedChecksum = Thrift.copyList(args.filesAddedChecksum, [null]);
    }
  }
};
InsertEventRequestData.prototype = {};
InsertEventRequestData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.filesAdded = [];
        var _rtmp3361 = input.readListBegin();
        var _size360 = _rtmp3361.size || 0;
        for (var _i362 = 0; _i362 < _size360; ++_i362) {
          var elem363 = null;
          elem363 = input.readString();
          this.filesAdded.push(elem363);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.filesAddedChecksum = [];
        var _rtmp3365 = input.readListBegin();
        var _size364 = _rtmp3365.size || 0;
        for (var _i366 = 0; _i366 < _size364; ++_i366) {
          var elem367 = null;
          elem367 = input.readString();
          this.filesAddedChecksum.push(elem367);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InsertEventRequestData.prototype.write = function(output) {
  output.writeStructBegin('InsertEventRequestData');
  if (this.filesAdded !== null && this.filesAdded !== undefined) {
    output.writeFieldBegin('filesAdded', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.filesAdded.length);
    for (var iter368 in this.filesAdded) {
      if (this.filesAdded.hasOwnProperty(iter368)) {
        iter368 = this.filesAdded[iter368];
        output.writeString(iter368);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filesAddedChecksum !== null && this.filesAddedChecksum !== undefined) {
    output.writeFieldBegin('filesAddedChecksum', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.filesAddedChecksum.length);
    for (var iter369 in this.filesAddedChecksum) {
      if (this.filesAddedChecksum.hasOwnProperty(iter369)) {
        iter369 = this.filesAddedChecksum[iter369];
        output.writeString(iter369);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FireEventRequestData = module.exports.FireEventRequestData = function(args) {
  this.insertData = null;
  if (args) {
    if (args.insertData !== undefined && args.insertData !== null) {
      this.insertData = new ttypes.InsertEventRequestData(args.insertData);
    }
  }
};
FireEventRequestData.prototype = {};
FireEventRequestData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.insertData = new ttypes.InsertEventRequestData();
        this.insertData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FireEventRequestData.prototype.write = function(output) {
  output.writeStructBegin('FireEventRequestData');
  if (this.insertData !== null && this.insertData !== undefined) {
    output.writeFieldBegin('insertData', Thrift.Type.STRUCT, 1);
    this.insertData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FireEventRequest = module.exports.FireEventRequest = function(args) {
  this.successful = null;
  this.data = null;
  this.dbName = null;
  this.tableName = null;
  this.partitionVals = null;
  if (args) {
    if (args.successful !== undefined && args.successful !== null) {
      this.successful = args.successful;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field successful is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.FireEventRequestData(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.partitionVals !== undefined && args.partitionVals !== null) {
      this.partitionVals = Thrift.copyList(args.partitionVals, [null]);
    }
  }
};
FireEventRequest.prototype = {};
FireEventRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.successful = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.FireEventRequestData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.partitionVals = [];
        var _rtmp3371 = input.readListBegin();
        var _size370 = _rtmp3371.size || 0;
        for (var _i372 = 0; _i372 < _size370; ++_i372) {
          var elem373 = null;
          elem373 = input.readString();
          this.partitionVals.push(elem373);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FireEventRequest.prototype.write = function(output) {
  output.writeStructBegin('FireEventRequest');
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.BOOL, 1);
    output.writeBool(this.successful);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 3);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partitionVals !== null && this.partitionVals !== undefined) {
    output.writeFieldBegin('partitionVals', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.partitionVals.length);
    for (var iter374 in this.partitionVals) {
      if (this.partitionVals.hasOwnProperty(iter374)) {
        iter374 = this.partitionVals[iter374];
        output.writeString(iter374);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FireEventResponse = module.exports.FireEventResponse = function(args) {
};
FireEventResponse.prototype = {};
FireEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FireEventResponse.prototype.write = function(output) {
  output.writeStructBegin('FireEventResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataPpdResult = module.exports.MetadataPpdResult = function(args) {
  this.metadata = null;
  this.includeBitset = null;
  if (args) {
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.includeBitset !== undefined && args.includeBitset !== null) {
      this.includeBitset = args.includeBitset;
    }
  }
};
MetadataPpdResult.prototype = {};
MetadataPpdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.includeBitset = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataPpdResult.prototype.write = function(output) {
  output.writeStructBegin('MetadataPpdResult');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 1);
    output.writeBinary(this.metadata);
    output.writeFieldEnd();
  }
  if (this.includeBitset !== null && this.includeBitset !== undefined) {
    output.writeFieldBegin('includeBitset', Thrift.Type.STRING, 2);
    output.writeBinary(this.includeBitset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFileMetadataByExprResult = module.exports.GetFileMetadataByExprResult = function(args) {
  this.metadata = null;
  this.isSupported = null;
  if (args) {
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyMap(args.metadata, [ttypes.MetadataPpdResult]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.isSupported !== undefined && args.isSupported !== null) {
      this.isSupported = args.isSupported;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isSupported is unset!');
    }
  }
};
GetFileMetadataByExprResult.prototype = {};
GetFileMetadataByExprResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.metadata = {};
        var _rtmp3376 = input.readMapBegin();
        var _size375 = _rtmp3376.size || 0;
        for (var _i377 = 0; _i377 < _size375; ++_i377) {
          var key378 = null;
          var val379 = null;
          key378 = input.readI64();
          val379 = new ttypes.MetadataPpdResult();
          val379.read(input);
          this.metadata[key378] = val379;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isSupported = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFileMetadataByExprResult.prototype.write = function(output) {
  output.writeStructBegin('GetFileMetadataByExprResult');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.metadata));
    for (var kiter380 in this.metadata) {
      if (this.metadata.hasOwnProperty(kiter380)) {
        var viter381 = this.metadata[kiter380];
        output.writeI64(kiter380);
        viter381.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.isSupported !== null && this.isSupported !== undefined) {
    output.writeFieldBegin('isSupported', Thrift.Type.BOOL, 2);
    output.writeBool(this.isSupported);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFileMetadataByExprRequest = module.exports.GetFileMetadataByExprRequest = function(args) {
  this.fileIds = null;
  this.expr = null;
  this.doGetFooters = null;
  this.type = null;
  if (args) {
    if (args.fileIds !== undefined && args.fileIds !== null) {
      this.fileIds = Thrift.copyList(args.fileIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileIds is unset!');
    }
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expr is unset!');
    }
    if (args.doGetFooters !== undefined && args.doGetFooters !== null) {
      this.doGetFooters = args.doGetFooters;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
GetFileMetadataByExprRequest.prototype = {};
GetFileMetadataByExprRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.fileIds = [];
        var _rtmp3383 = input.readListBegin();
        var _size382 = _rtmp3383.size || 0;
        for (var _i384 = 0; _i384 < _size382; ++_i384) {
          var elem385 = null;
          elem385 = input.readI64();
          this.fileIds.push(elem385);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.doGetFooters = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFileMetadataByExprRequest.prototype.write = function(output) {
  output.writeStructBegin('GetFileMetadataByExprRequest');
  if (this.fileIds !== null && this.fileIds !== undefined) {
    output.writeFieldBegin('fileIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.fileIds.length);
    for (var iter386 in this.fileIds) {
      if (this.fileIds.hasOwnProperty(iter386)) {
        iter386 = this.fileIds[iter386];
        output.writeI64(iter386);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 2);
    output.writeBinary(this.expr);
    output.writeFieldEnd();
  }
  if (this.doGetFooters !== null && this.doGetFooters !== undefined) {
    output.writeFieldBegin('doGetFooters', Thrift.Type.BOOL, 3);
    output.writeBool(this.doGetFooters);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFileMetadataResult = module.exports.GetFileMetadataResult = function(args) {
  this.metadata = null;
  this.isSupported = null;
  if (args) {
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyMap(args.metadata, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.isSupported !== undefined && args.isSupported !== null) {
      this.isSupported = args.isSupported;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isSupported is unset!');
    }
  }
};
GetFileMetadataResult.prototype = {};
GetFileMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.metadata = {};
        var _rtmp3388 = input.readMapBegin();
        var _size387 = _rtmp3388.size || 0;
        for (var _i389 = 0; _i389 < _size387; ++_i389) {
          var key390 = null;
          var val391 = null;
          key390 = input.readI64();
          val391 = input.readBinary();
          this.metadata[key390] = val391;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isSupported = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFileMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('GetFileMetadataResult');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.metadata));
    for (var kiter392 in this.metadata) {
      if (this.metadata.hasOwnProperty(kiter392)) {
        var viter393 = this.metadata[kiter392];
        output.writeI64(kiter392);
        output.writeBinary(viter393);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.isSupported !== null && this.isSupported !== undefined) {
    output.writeFieldBegin('isSupported', Thrift.Type.BOOL, 2);
    output.writeBool(this.isSupported);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFileMetadataRequest = module.exports.GetFileMetadataRequest = function(args) {
  this.fileIds = null;
  if (args) {
    if (args.fileIds !== undefined && args.fileIds !== null) {
      this.fileIds = Thrift.copyList(args.fileIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileIds is unset!');
    }
  }
};
GetFileMetadataRequest.prototype = {};
GetFileMetadataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.fileIds = [];
        var _rtmp3395 = input.readListBegin();
        var _size394 = _rtmp3395.size || 0;
        for (var _i396 = 0; _i396 < _size394; ++_i396) {
          var elem397 = null;
          elem397 = input.readI64();
          this.fileIds.push(elem397);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFileMetadataRequest.prototype.write = function(output) {
  output.writeStructBegin('GetFileMetadataRequest');
  if (this.fileIds !== null && this.fileIds !== undefined) {
    output.writeFieldBegin('fileIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.fileIds.length);
    for (var iter398 in this.fileIds) {
      if (this.fileIds.hasOwnProperty(iter398)) {
        iter398 = this.fileIds[iter398];
        output.writeI64(iter398);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PutFileMetadataResult = module.exports.PutFileMetadataResult = function(args) {
};
PutFileMetadataResult.prototype = {};
PutFileMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutFileMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('PutFileMetadataResult');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PutFileMetadataRequest = module.exports.PutFileMetadataRequest = function(args) {
  this.fileIds = null;
  this.metadata = null;
  this.type = null;
  if (args) {
    if (args.fileIds !== undefined && args.fileIds !== null) {
      this.fileIds = Thrift.copyList(args.fileIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileIds is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyList(args.metadata, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
PutFileMetadataRequest.prototype = {};
PutFileMetadataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.fileIds = [];
        var _rtmp3400 = input.readListBegin();
        var _size399 = _rtmp3400.size || 0;
        for (var _i401 = 0; _i401 < _size399; ++_i401) {
          var elem402 = null;
          elem402 = input.readI64();
          this.fileIds.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.metadata = [];
        var _rtmp3404 = input.readListBegin();
        var _size403 = _rtmp3404.size || 0;
        for (var _i405 = 0; _i405 < _size403; ++_i405) {
          var elem406 = null;
          elem406 = input.readBinary();
          this.metadata.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutFileMetadataRequest.prototype.write = function(output) {
  output.writeStructBegin('PutFileMetadataRequest');
  if (this.fileIds !== null && this.fileIds !== undefined) {
    output.writeFieldBegin('fileIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.fileIds.length);
    for (var iter407 in this.fileIds) {
      if (this.fileIds.hasOwnProperty(iter407)) {
        iter407 = this.fileIds[iter407];
        output.writeI64(iter407);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.metadata.length);
    for (var iter408 in this.metadata) {
      if (this.metadata.hasOwnProperty(iter408)) {
        iter408 = this.metadata[iter408];
        output.writeBinary(iter408);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClearFileMetadataResult = module.exports.ClearFileMetadataResult = function(args) {
};
ClearFileMetadataResult.prototype = {};
ClearFileMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClearFileMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('ClearFileMetadataResult');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClearFileMetadataRequest = module.exports.ClearFileMetadataRequest = function(args) {
  this.fileIds = null;
  if (args) {
    if (args.fileIds !== undefined && args.fileIds !== null) {
      this.fileIds = Thrift.copyList(args.fileIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileIds is unset!');
    }
  }
};
ClearFileMetadataRequest.prototype = {};
ClearFileMetadataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.fileIds = [];
        var _rtmp3410 = input.readListBegin();
        var _size409 = _rtmp3410.size || 0;
        for (var _i411 = 0; _i411 < _size409; ++_i411) {
          var elem412 = null;
          elem412 = input.readI64();
          this.fileIds.push(elem412);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClearFileMetadataRequest.prototype.write = function(output) {
  output.writeStructBegin('ClearFileMetadataRequest');
  if (this.fileIds !== null && this.fileIds !== undefined) {
    output.writeFieldBegin('fileIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.fileIds.length);
    for (var iter413 in this.fileIds) {
      if (this.fileIds.hasOwnProperty(iter413)) {
        iter413 = this.fileIds[iter413];
        output.writeI64(iter413);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CacheFileMetadataResult = module.exports.CacheFileMetadataResult = function(args) {
  this.isSupported = null;
  if (args) {
    if (args.isSupported !== undefined && args.isSupported !== null) {
      this.isSupported = args.isSupported;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isSupported is unset!');
    }
  }
};
CacheFileMetadataResult.prototype = {};
CacheFileMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isSupported = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CacheFileMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('CacheFileMetadataResult');
  if (this.isSupported !== null && this.isSupported !== undefined) {
    output.writeFieldBegin('isSupported', Thrift.Type.BOOL, 1);
    output.writeBool(this.isSupported);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CacheFileMetadataRequest = module.exports.CacheFileMetadataRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.partName = null;
  this.isAllParts = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.partName !== undefined && args.partName !== null) {
      this.partName = args.partName;
    }
    if (args.isAllParts !== undefined && args.isAllParts !== null) {
      this.isAllParts = args.isAllParts;
    }
  }
};
CacheFileMetadataRequest.prototype = {};
CacheFileMetadataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isAllParts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CacheFileMetadataRequest.prototype.write = function(output) {
  output.writeStructBegin('CacheFileMetadataRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.partName !== null && this.partName !== undefined) {
    output.writeFieldBegin('partName', Thrift.Type.STRING, 3);
    output.writeString(this.partName);
    output.writeFieldEnd();
  }
  if (this.isAllParts !== null && this.isAllParts !== undefined) {
    output.writeFieldBegin('isAllParts', Thrift.Type.BOOL, 4);
    output.writeBool(this.isAllParts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAllFunctionsResponse = module.exports.GetAllFunctionsResponse = function(args) {
  this.functions = null;
  if (args) {
    if (args.functions !== undefined && args.functions !== null) {
      this.functions = Thrift.copyList(args.functions, [ttypes.Function]);
    }
  }
};
GetAllFunctionsResponse.prototype = {};
GetAllFunctionsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.functions = [];
        var _rtmp3415 = input.readListBegin();
        var _size414 = _rtmp3415.size || 0;
        for (var _i416 = 0; _i416 < _size414; ++_i416) {
          var elem417 = null;
          elem417 = new ttypes.Function();
          elem417.read(input);
          this.functions.push(elem417);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllFunctionsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetAllFunctionsResponse');
  if (this.functions !== null && this.functions !== undefined) {
    output.writeFieldBegin('functions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.functions.length);
    for (var iter418 in this.functions) {
      if (this.functions.hasOwnProperty(iter418)) {
        iter418 = this.functions[iter418];
        iter418.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientCapabilities = module.exports.ClientCapabilities = function(args) {
  this.values = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
  }
};
ClientCapabilities.prototype = {};
ClientCapabilities.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp3420 = input.readListBegin();
        var _size419 = _rtmp3420.size || 0;
        for (var _i421 = 0; _i421 < _size419; ++_i421) {
          var elem422 = null;
          elem422 = input.readI32();
          this.values.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientCapabilities.prototype.write = function(output) {
  output.writeStructBegin('ClientCapabilities');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.values.length);
    for (var iter423 in this.values) {
      if (this.values.hasOwnProperty(iter423)) {
        iter423 = this.values[iter423];
        output.writeI32(iter423);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetTableRequest = module.exports.GetTableRequest = function(args) {
  this.dbName = null;
  this.tblName = null;
  this.capabilities = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblName !== undefined && args.tblName !== null) {
      this.tblName = args.tblName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tblName is unset!');
    }
    if (args.capabilities !== undefined && args.capabilities !== null) {
      this.capabilities = new ttypes.ClientCapabilities(args.capabilities);
    }
  }
};
GetTableRequest.prototype = {};
GetTableRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tblName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.capabilities = new ttypes.ClientCapabilities();
        this.capabilities.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTableRequest.prototype.write = function(output) {
  output.writeStructBegin('GetTableRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblName !== null && this.tblName !== undefined) {
    output.writeFieldBegin('tblName', Thrift.Type.STRING, 2);
    output.writeString(this.tblName);
    output.writeFieldEnd();
  }
  if (this.capabilities !== null && this.capabilities !== undefined) {
    output.writeFieldBegin('capabilities', Thrift.Type.STRUCT, 3);
    this.capabilities.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetTableResult = module.exports.GetTableResult = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = new ttypes.Table(args.table);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
  }
};
GetTableResult.prototype = {};
GetTableResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new ttypes.Table();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTableResult.prototype.write = function(output) {
  output.writeStructBegin('GetTableResult');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetTablesRequest = module.exports.GetTablesRequest = function(args) {
  this.dbName = null;
  this.tblNames = null;
  this.capabilities = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tblNames !== undefined && args.tblNames !== null) {
      this.tblNames = Thrift.copyList(args.tblNames, [null]);
    }
    if (args.capabilities !== undefined && args.capabilities !== null) {
      this.capabilities = new ttypes.ClientCapabilities(args.capabilities);
    }
  }
};
GetTablesRequest.prototype = {};
GetTablesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tblNames = [];
        var _rtmp3425 = input.readListBegin();
        var _size424 = _rtmp3425.size || 0;
        for (var _i426 = 0; _i426 < _size424; ++_i426) {
          var elem427 = null;
          elem427 = input.readString();
          this.tblNames.push(elem427);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.capabilities = new ttypes.ClientCapabilities();
        this.capabilities.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTablesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetTablesRequest');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tblNames !== null && this.tblNames !== undefined) {
    output.writeFieldBegin('tblNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tblNames.length);
    for (var iter428 in this.tblNames) {
      if (this.tblNames.hasOwnProperty(iter428)) {
        iter428 = this.tblNames[iter428];
        output.writeString(iter428);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.capabilities !== null && this.capabilities !== undefined) {
    output.writeFieldBegin('capabilities', Thrift.Type.STRUCT, 3);
    this.capabilities.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetTablesResult = module.exports.GetTablesResult = function(args) {
  this.tables = null;
  if (args) {
    if (args.tables !== undefined && args.tables !== null) {
      this.tables = Thrift.copyList(args.tables, [ttypes.Table]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tables is unset!');
    }
  }
};
GetTablesResult.prototype = {};
GetTablesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tables = [];
        var _rtmp3430 = input.readListBegin();
        var _size429 = _rtmp3430.size || 0;
        for (var _i431 = 0; _i431 < _size429; ++_i431) {
          var elem432 = null;
          elem432 = new ttypes.Table();
          elem432.read(input);
          this.tables.push(elem432);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTablesResult.prototype.write = function(output) {
  output.writeStructBegin('GetTablesResult');
  if (this.tables !== null && this.tables !== undefined) {
    output.writeFieldBegin('tables', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tables.length);
    for (var iter433 in this.tables) {
      if (this.tables.hasOwnProperty(iter433)) {
        iter433 = this.tables[iter433];
        iter433.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableMeta = module.exports.TableMeta = function(args) {
  this.dbName = null;
  this.tableName = null;
  this.tableType = null;
  this.comments = null;
  if (args) {
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.tableType !== undefined && args.tableType !== null) {
      this.tableType = args.tableType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableType is unset!');
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = args.comments;
    }
  }
};
TableMeta.prototype = {};
TableMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableMeta.prototype.write = function(output) {
  output.writeStructBegin('TableMeta');
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 1);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableType !== null && this.tableType !== undefined) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 3);
    output.writeString(this.tableType);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 4);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetaException = module.exports.MetaException = function(args) {
  Thrift.TException.call(this, "MetaException");
  this.name = "MetaException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(MetaException, Thrift.TException);
MetaException.prototype.name = 'MetaException';
MetaException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaException.prototype.write = function(output) {
  output.writeStructBegin('MetaException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownTableException = module.exports.UnknownTableException = function(args) {
  Thrift.TException.call(this, "UnknownTableException");
  this.name = "UnknownTableException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownTableException, Thrift.TException);
UnknownTableException.prototype.name = 'UnknownTableException';
UnknownTableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownTableException.prototype.write = function(output) {
  output.writeStructBegin('UnknownTableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownDBException = module.exports.UnknownDBException = function(args) {
  Thrift.TException.call(this, "UnknownDBException");
  this.name = "UnknownDBException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownDBException, Thrift.TException);
UnknownDBException.prototype.name = 'UnknownDBException';
UnknownDBException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownDBException.prototype.write = function(output) {
  output.writeStructBegin('UnknownDBException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlreadyExistsException = module.exports.AlreadyExistsException = function(args) {
  Thrift.TException.call(this, "AlreadyExistsException");
  this.name = "AlreadyExistsException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AlreadyExistsException, Thrift.TException);
AlreadyExistsException.prototype.name = 'AlreadyExistsException';
AlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('AlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPartitionException = module.exports.InvalidPartitionException = function(args) {
  Thrift.TException.call(this, "InvalidPartitionException");
  this.name = "InvalidPartitionException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidPartitionException, Thrift.TException);
InvalidPartitionException.prototype.name = 'InvalidPartitionException';
InvalidPartitionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPartitionException.prototype.write = function(output) {
  output.writeStructBegin('InvalidPartitionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownPartitionException = module.exports.UnknownPartitionException = function(args) {
  Thrift.TException.call(this, "UnknownPartitionException");
  this.name = "UnknownPartitionException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownPartitionException, Thrift.TException);
UnknownPartitionException.prototype.name = 'UnknownPartitionException';
UnknownPartitionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownPartitionException.prototype.write = function(output) {
  output.writeStructBegin('UnknownPartitionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidObjectException = module.exports.InvalidObjectException = function(args) {
  Thrift.TException.call(this, "InvalidObjectException");
  this.name = "InvalidObjectException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidObjectException, Thrift.TException);
InvalidObjectException.prototype.name = 'InvalidObjectException';
InvalidObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidObjectException.prototype.write = function(output) {
  output.writeStructBegin('InvalidObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchObjectException = module.exports.NoSuchObjectException = function(args) {
  Thrift.TException.call(this, "NoSuchObjectException");
  this.name = "NoSuchObjectException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchObjectException, Thrift.TException);
NoSuchObjectException.prototype.name = 'NoSuchObjectException';
NoSuchObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchObjectException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IndexAlreadyExistsException = module.exports.IndexAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "IndexAlreadyExistsException");
  this.name = "IndexAlreadyExistsException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IndexAlreadyExistsException, Thrift.TException);
IndexAlreadyExistsException.prototype.name = 'IndexAlreadyExistsException';
IndexAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('IndexAlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidOperationException = module.exports.InvalidOperationException = function(args) {
  Thrift.TException.call(this, "InvalidOperationException");
  this.name = "InvalidOperationException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidOperationException, Thrift.TException);
InvalidOperationException.prototype.name = 'InvalidOperationException';
InvalidOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperationException.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConfigValSecurityException = module.exports.ConfigValSecurityException = function(args) {
  Thrift.TException.call(this, "ConfigValSecurityException");
  this.name = "ConfigValSecurityException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ConfigValSecurityException, Thrift.TException);
ConfigValSecurityException.prototype.name = 'ConfigValSecurityException';
ConfigValSecurityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigValSecurityException.prototype.write = function(output) {
  output.writeStructBegin('ConfigValSecurityException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidInputException = module.exports.InvalidInputException = function(args) {
  Thrift.TException.call(this, "InvalidInputException");
  this.name = "InvalidInputException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidInputException, Thrift.TException);
InvalidInputException.prototype.name = 'InvalidInputException';
InvalidInputException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidInputException.prototype.write = function(output) {
  output.writeStructBegin('InvalidInputException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchTxnException = module.exports.NoSuchTxnException = function(args) {
  Thrift.TException.call(this, "NoSuchTxnException");
  this.name = "NoSuchTxnException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchTxnException, Thrift.TException);
NoSuchTxnException.prototype.name = 'NoSuchTxnException';
NoSuchTxnException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchTxnException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchTxnException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TxnAbortedException = module.exports.TxnAbortedException = function(args) {
  Thrift.TException.call(this, "TxnAbortedException");
  this.name = "TxnAbortedException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TxnAbortedException, Thrift.TException);
TxnAbortedException.prototype.name = 'TxnAbortedException';
TxnAbortedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TxnAbortedException.prototype.write = function(output) {
  output.writeStructBegin('TxnAbortedException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TxnOpenException = module.exports.TxnOpenException = function(args) {
  Thrift.TException.call(this, "TxnOpenException");
  this.name = "TxnOpenException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TxnOpenException, Thrift.TException);
TxnOpenException.prototype.name = 'TxnOpenException';
TxnOpenException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TxnOpenException.prototype.write = function(output) {
  output.writeStructBegin('TxnOpenException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchLockException = module.exports.NoSuchLockException = function(args) {
  Thrift.TException.call(this, "NoSuchLockException");
  this.name = "NoSuchLockException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchLockException, Thrift.TException);
NoSuchLockException.prototype.name = 'NoSuchLockException';
NoSuchLockException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchLockException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchLockException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DDL_TIME = 'transient_lastDdlTime';
ttypes.HIVE_FILTER_FIELD_OWNER = 'hive_filter_field_owner__';
ttypes.HIVE_FILTER_FIELD_PARAMS = 'hive_filter_field_params__';
ttypes.HIVE_FILTER_FIELD_LAST_ACCESS = 'hive_filter_field_last_access__';
ttypes.IS_ARCHIVED = 'is_archived';
ttypes.ORIGINAL_LOCATION = 'original_location';
ttypes.IS_IMMUTABLE = 'immutable';
ttypes.META_TABLE_COLUMNS = 'columns';
ttypes.META_TABLE_COLUMN_TYPES = 'columns.types';
ttypes.BUCKET_FIELD_NAME = 'bucket_field_name';
ttypes.BUCKET_COUNT = 'bucket_count';
ttypes.FIELD_TO_DIMENSION = 'field_to_dimension';
ttypes.META_TABLE_NAME = 'name';
ttypes.META_TABLE_DB = 'db';
ttypes.META_TABLE_LOCATION = 'location';
ttypes.META_TABLE_SERDE = 'serde';
ttypes.META_TABLE_PARTITION_COLUMNS = 'partition_columns';
ttypes.META_TABLE_PARTITION_COLUMN_TYPES = 'partition_columns.types';
ttypes.FILE_INPUT_FORMAT = 'file.inputformat';
ttypes.FILE_OUTPUT_FORMAT = 'file.outputformat';
ttypes.META_TABLE_STORAGE = 'storage_handler';
ttypes.TABLE_IS_TRANSACTIONAL = 'transactional';
ttypes.TABLE_NO_AUTO_COMPACT = 'no_auto_compaction';
ttypes.TABLE_TRANSACTIONAL_PROPERTIES = 'transactional_properties';
